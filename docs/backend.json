{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the ParkSmart Reserve application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "username": {
          "type": "string",
          "description": "The username of the user."
        },
        "email": {
          "type": "string",
          "description": "The email address of the user.",
          "format": "email"
        },
        "preferredParkingLocation": {
          "type": "string",
          "description": "Preferred parking location of the user."
        }
      },
      "required": [
        "id",
        "username",
        "email"
      ]
    },
    "ParkingSlot": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ParkingSlot",
      "type": "object",
      "description": "Represents a parking slot in the virtual geo-fencing system.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the parking slot."
        },
        "slotNumber": {
          "type": "string",
          "description": "The number or identifier of the parking slot within the geo-fenced area."
        },
        "latitude": {
          "type": "number",
          "description": "The latitude coordinate of the parking slot."
        },
        "longitude": {
          "type": "number",
          "description": "The longitude coordinate of the parking slot."
        },
        "isAvailable": {
          "type": "boolean",
          "description": "Indicates whether the parking slot is currently available."
        }
      },
      "required": [
        "id",
        "slotNumber",
        "latitude",
        "longitude",
        "isAvailable"
      ]
    },
    "Reservation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Reservation",
      "type": "object",
      "description": "Represents a reservation made by a user for a parking slot.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the reservation."
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Reservation)"
        },
        "parkingSlotId": {
          "type": "string",
          "description": "Reference to ParkingSlot. (Relationship: ParkingSlot 1:N Reservation)"
        },
        "startTime": {
          "type": "string",
          "description": "The start time of the reservation.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "The end time of the reservation.",
          "format": "date-time"
        },
        "reservationDate": {
          "type": "string",
          "description": "The date of the reservation",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "parkingSlotId",
        "startTime",
        "endTime",
        "reservationDate"
      ]
    },
    "Violation": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Violation",
      "type": "object",
      "description": "Represents a parking violation detected by the AI-powered tool.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the violation."
        },
        "parkingSlotId": {
          "type": "string",
          "description": "Reference to ParkingSlot. (Relationship: ParkingSlot 1:N Violation)"
        },
        "violationTime": {
          "type": "string",
          "description": "The date and time when the violation occurred.",
          "format": "date-time"
        },
        "violationType": {
          "type": "string",
          "description": "The type of violation (e.g., overstaying, unauthorized parking)."
        },
        "description": {
          "type": "string",
          "description": "A description of the violation."
        }
      },
      "required": [
        "id",
        "parkingSlotId",
        "violationTime",
        "violationType"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile data. The 'userId' is the Firebase Authentication UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Authentication UID of the user."
            }
          ]
        }
      },
      {
        "path": "/parkingSlots/{parkingSlotId}",
        "definition": {
          "entityName": "ParkingSlot",
          "schema": {
            "$ref": "#/backend/entities/ParkingSlot"
          },
          "description": "Stores parking slot information, including availability status.",
          "params": [
            {
              "name": "parkingSlotId",
              "description": "Unique identifier for the parking slot."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/reservations/{reservationId}",
        "definition": {
          "entityName": "Reservation",
          "schema": {
            "$ref": "#/backend/entities/Reservation"
          },
          "description": "Stores reservation data for each user.  Includes denormalized 'userId' from the parent document for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Authentication UID of the user making the reservation."
            },
            {
              "name": "reservationId",
              "description": "Unique identifier for the reservation."
            }
          ]
        }
      },
      {
        "path": "/violations/{violationId}",
        "definition": {
          "entityName": "Violation",
          "schema": {
            "$ref": "#/backend/entities/Violation"
          },
          "description": "Stores parking violation data.",
          "params": [
            {
              "name": "violationId",
              "description": "Unique identifier for the parking violation."
            }
          ]
        }
      }
    ],
    "reasoning": "This design prioritizes authorization independence and efficient data retrieval for the ParkSmart Reserve application, focusing on the core requirement of displaying real-time parking slot availability and managing reservations. The structure leverages path-based ownership for user-specific data and denormalization to avoid complex security rules. The design incorporates these strategies to deliver a secure, scalable, and easily debuggable Firestore structure.\n\n**Authorization Independence and QAPs:**\n\n*   **`/users/{userId}/reservations/{reservationId}`:** This structure uses path-based ownership, ensuring that only the user with the matching `userId` can access their reservations. This eliminates the need for `get()` calls in security rules, as authorization is directly derived from the path. To support the app requirement of showing occupied slots for other users, the `reservations` data includes parking slot `id` and reservation time frame.\n\n**Structural Segregation:**\n\n*   The design segregates user-specific data (reservations) under the `/users/{userId}` path, maintaining a consistent security posture for all documents within the `reservations` collection. This segregation simplifies security rules and avoids mixing data with different access requirements.\n\n**Access Modeling:**\n\n*   Path-based ownership is consistently used for user-owned data, such as reservations. This approach ensures that authorization rules are straightforward and efficient.\n\n**Data Clarity and Predictability:**\n\n*   The schema for each entity is well-defined, with explicit state modeling (e.g., `isAvailable` in the `ParkingSlot` entity). This clarity makes it easier to understand the data structure and write accurate security rules."
  }
}