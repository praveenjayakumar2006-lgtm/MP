/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User-specific data is protected
 * via strict ownership checks (`isOwner`). Public data (e.g., parking slots) is
 * readable by all, while write access is restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with 'userId' matching the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information, publicly readable.
 * - /reservations/{reservationId}: Stores reservation data, with owner-only write access.
 * - /violations/{violationId}: Stores parking violation data, write access is restricted
 * - /feedback/{feedbackId}: Stores user feedback, write access is restricted
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the /parkingSlots collection.
 * - Write access to reservation documents is restricted to the user who created the reservation.
 *
 * Denormalization for Authorization:
 * - The `reservations` collection requires the `userId` field in each document to match
 *   the UID of the user making the reservation. This enables owner-only access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId - The user ID to check against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can create their own profile.
     * @allow (get) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can get their own profile.
     * @allow (update) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can update their own profile.
     * @allow (delete) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can delete their own profile.
     * @deny (create) User W5jFj7q8k9a2X1zYh4b6cV0d9sL2 cannot create a profile for user VPZyqqa51tbZOMAVa8WInmGUCzm1.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for parking slots.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get) Any user can read parking slot information.
     * @allow (list) Any user can list parking slot information.
     * @deny (create) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot create parking slot.
     * @deny (update) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot update parking slot.
     * @deny (delete) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot delete parking slot.
     * @principle Allows public read access to parking slot information, restricts all write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for reservations.
     * @path /reservations/{reservationId}
     * @allow (create) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can create a reservation with userId matching their own UID.
     * @allow (get) Any user can get reservation information.
     * @allow (update) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can update reservation information they own.
     * @allow (delete) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can delete reservation information they own.
     * @deny (create) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot create a reservation with userId not matching their own UID.
     * @principle Enforces document ownership for writes, validates relational integrity between documents.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Rules for violations.
     * @path /violations/{violationId}
     * @deny (create) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot create violation.
     * @deny (get) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot get violation.
     * @deny (list) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot list violation.
     * @deny (update) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot update violation.
     * @deny (delete) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot delete violation.
     */
    match /violations/{violationId} {
      allow get, list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for feedback.
     * @path /feedback/{feedbackId}
     * @deny (create) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot create feedback.
     * @deny (get) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot get feedback.
     * @deny (list) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot list feedback.
     * @deny (update) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot update feedback.
     * @deny (delete) User VPZyqqa51tbZOMAVa8WInmGUCzm1 cannot delete feedback.
     */
    match /feedback/{feedbackId} {
      allow get, list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}