/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allowing users to only read and write their own data. Public read access
 * is granted to parking slots, violations, and feedback to enable broader
 * visibility. Reservations are also publicly readable but writable only by
 * authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot details.
 * - /reservations/{reservationId}: Stores parking reservations.
 * - /violations/{violationId}: Stores parking violation records.
 * - /feedback/{feedbackId}: Stores user feedback submissions.
 *
 * Key Security Decisions:
 * - Users can only access their own user documents.
 * - Public read access for parking slots, reservations, violations, and feedback.
 * - Only authenticated users can create reservations.
 *
 * Denormalization for Authorization:
 *  N/A - Current rules do not require denormalization.
 *
 * Structural Segregation:
 *  N/A - No explicit segregation of public and private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) if isSignedIn() && isOwner(userId);
     * @allow (create, update, delete) if isSignedIn() && isOwner(userId);
     * @deny (get, list) if !isSignedIn();
     * @deny (create, update, delete) if !isSignedIn();
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //function isSignedIn() {
      //  return request.auth != null;
      //}
      //function isOwner(userId) {
      //  return request.auth.uid == userId;
      //}
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create, update, delete: if true;
     * @principle Allows public read access, restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to reservation data.
     * @path /reservations/{reservationId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn();
     * @allow update, delete: if false;
     * @deny create: if !isSignedIn();
     * @deny update, delete: if true;
     * @principle Allows public read access, restricts write access to authenticated users for creation.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to violation data.
     * @path /violations/{violationId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create, update, delete: if true;
     * @principle Allows public read access, restricts write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @deny create, update, delete: if true;
     * @principle Allows public read access, restricts write access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}