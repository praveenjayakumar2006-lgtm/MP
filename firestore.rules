/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a combination of user-ownership and public-read with restricted-write access patterns.
 *  - User profiles are secured via ownership, where only the authenticated user can read/write their own profile.
 *  - Parking slots, reservations, violations, and feedback are publicly readable. Write access to these collections is denied for authenticated users.
 * @data-structure
 *  - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase auth UID.
 *  - /parkingSlots/{parkingSlotId}: Stores parking slot information.
 *  - /reservations/{reservationId}: Stores reservation details.
 *  - /violations/{violationId}: Stores violation records.
 *  - /feedback/{feedbackId}: Stores user feedback.
 * @key-security-decisions
 *  - User listing is disallowed to protect privacy.
 *  - Feedback collection is writeable by all authenticated users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles, allowing only the owner to read and write their data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read/write document 'user123'.
     * @allow (create) User with UID 'user123' can create document 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read/write document 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information, but restricts write access.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot data.
     * @deny (create, update, delete) No user can create, update, or delete parking slot data.
     * @principle Allows public read access while restricting write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to reservation information, but restricts write access.
     * @path /reservations/{reservationId}
     * @allow (get, list) Any user can read reservation data.
     * @deny (create, update, delete) No user can create, update, or delete reservation data.
     * @principle Allows public read access while restricting write access.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to violation data, but restricts write access.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation data.
     * @deny (create, update, delete) No user can create, update, or delete violation data.
     * @principle Allows public read access while restricting write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to feedback data, and authenticated users can create feedback. Update and delete are disallowed.
     * @path /feedback/{feedbackId}
     * @allow (get, list) Any user can read feedback data.
     * @allow (create) Any authenticated user can create feedback.
     * @deny (update, delete) No user can update or delete feedback data.
     * @principle Allows public read and authenticated create access, restricting other write operations.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}