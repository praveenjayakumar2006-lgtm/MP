/**
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 *              allows public read access for parking slots, reservations, violations, and feedback,
 *              and requires authentication for write operations on all collections.
 *
 * @dataStructure
 *  - /users/{userId}: Stores individual user profiles, accessible only to the authenticated user with a matching UID.
 *  - /parkingSlots/{parkingSlotId}: Publicly readable collection of parking slot data.
 *  - /reservations/{reservationId}: Publicly readable collection of reservation data.
 *  - /violations/{violationId}: Publicly readable collection of parking violation data.
 *  - /feedback/{feedbackId}: Publicly readable collection of user feedback.
 *
 * @keySecurityDecisions
 *  - User profiles are strictly private; only the owning user can read or write their profile.
 *  - Listing of users is disallowed to protect user privacy.
 *  - All other collections are publicly readable to facilitate data sharing and discovery.
 *  - Write access to all collections requires authentication to prevent unauthorized modifications.
 *  - The prototyping philosophy prioritizes authorization over data validation, allowing flexible data shapes for rapid iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) - Authenticated user with matching UID.
     * @deny (get, create, update, delete) - Any other user or unauthenticated request.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verify that the user is signed in
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Allows public read access to parking slot data and requires authentication for write operations.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user (public read).
     * @allow (create, update, delete) - Authenticated users only.
     * @deny (create, update, delete) - Unauthenticated users.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to reservation data and requires authentication for write operations.
     * @path /reservations/{reservationId}
     * @allow (get, list) - Any user (public read).
     * @allow (create, update, delete) - Authenticated users only.
     * @deny (create, update, delete) - Unauthenticated users.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to violation data and requires authentication for write operations.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user (public read).
     * @allow (create, update, delete) - Authenticated users only.
     * @deny (create, update, delete) - Unauthenticated users.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to feedback data and requires authentication for write operations.
     * @path /feedback/{feedbackId}
     * @allow (get, list) - Any user (public read).
     * @allow (create, update, delete) - Authenticated users only.
     * @deny (create, update, delete) - Unauthenticated users.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }
}