/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User-specific data (profiles, reservations) is protected by strict ownership.
 * Public data (parking slots) is readable by anyone. Feedback submissions are open.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, where {userId} is the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Parking slot information (publicly readable).
 * - /reservations/{reservationId}: Parking reservation data.
 * - /violations/{violationId}: Parking violation data.
 * - /feedback/{feedbackId}: User feedback submissions (open).
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Listing all users is disallowed.
 * - Parking slot data is publicly readable but not writable by clients.
 * - Reservations are accessible only to the user who created them.
 * - Feedback is open to allow unauthenticated submission.
 *
 * Denormalization for Authorization:
 * - Reservations include a 'userId' field to quickly check ownership.
 *
 * Structural Segregation:
 * - There is no private vs. public content within the same collection. Public readability is granted at the entire collection level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and the userId matches the authenticated user's UID.
     *   Example: A user with UID 'user123' can read, create, update, and delete the document at /users/user123.
     * @deny (get, create, update, delete) if the userId does not match the authenticated user's UID or the user is not signed in.
     *   Example: A user with UID 'user456' cannot access the document at /users/user123.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read parking slot data, but restricts creation, updates, and deletion.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Public read access to parking slot data.
     *   Example: Any user can read the document at /parkingSlots/slotA.
     * @deny (create, update, delete) All write operations are denied to clients.
     *   Example: No user can create, update, or delete the document at /parkingSlots/slotA.
     * @principle Public read access with restricted writes for parking slot data.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to manage their own reservations.
     * @path /reservations/{reservationId}
     * @allow (get, create, update, delete) if the user is the owner of the reservation.
     *   Example: A user with UID 'user123' can read, create, update, and delete the document at /reservations/res123 if the reservation's userId field is 'user123'.
     * @deny (get, create, update, delete) if the user is not the owner of the reservation.
     *   Example: A user with UID 'user456' cannot access the document at /reservations/res123, even if they are authenticated.
     * @principle Enforces document ownership for reservations.
     */
    match /reservations/{reservationId} {
      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

     /**
      * @description Allows read and write operations on parking violation data (Potentially only the backend can write to these)
      * @path /violations/{violationId}
      * @allow (get) anyone to read violation data.
      * @allow (create, update, delete) no client can create, update, or delete violation reports.
      */
    match /violations/{violationId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to create feedback, but restricts reading, updating, and deleting.
     * @path /feedback/{feedbackId}
     * @allow (create) Anyone can submit feedback.
     *   Example: Any user, authenticated or not, can create a document at /feedback/feedback1.
     * @deny (get, list, update, delete) No client can read, update, or delete feedback.
     *   Example: No user can read, update, or delete the document at /feedback/feedback1.
     * @principle Allows public feedback submission with restricted access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if true;
      allow update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}