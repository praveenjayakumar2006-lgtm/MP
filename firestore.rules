/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and their reservations.
 * Reservations are secured under the /users/{userId} path to ensure only the owning user can access them.
 * Public read access is granted to parking slots and violations to support the app's core functionality
 * of displaying real-time parking availability and detected violations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with 'userId' matching the Firebase auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information, publicly readable.
 * - /reservations/{reservationId}: Stores reservation data, accessible only by the owning user.
 * - /violations/{violationId}: Stores parking violation data, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Public read access is granted to parking slots and violations, deemed necessary for core app functionality.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 *
 * Denormalization for Authorization:
 * - The `reservations` document includes the `userId` field, which is essential for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and it exists.
     * This function is used for update and delete operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get) Signed-in user reads their own profile.
     * @allow (update) Signed-in user updates their own profile.
     * @allow (delete) Signed-in user deletes their own profile.
     * @deny (create) Signed-in user tries to create another user's profile.
     * @deny (get) Non-signed-in user tries to read a profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get) Any user can read parking slot information.
     * @allow (list) Any user can list parking slot information.
     * @deny (create) No one can create parking slots through the client.
     * @deny (update) No one can update parking slots through the client.
     * @deny (delete) No one can delete parking slots through the client.
     * @principle Allows public read access with restricted writes.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces ownership for reservations.
     * @path /reservations/{reservationId}
     * @allow (create) Signed-in user creates a reservation.
     * @allow (get) Signed-in user reads their own reservation.
     * @allow (update) Signed-in user updates their own reservation.
     * @allow (delete) Signed-in user deletes their own reservation.
     * @deny (create) Signed-in user tries to create another user's reservation.
     * @deny (get) Non-signed-in user tries to read a reservation.
     * @principle Enforces document ownership for writes.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to parking violation data.
     * @path /violations/{violationId}
     * @allow (get) Any user can read parking violation data.
     * @allow (list) Any user can list parking violation data.
     * @deny (create) No one can create violation through the client.
     * @deny (update) No one can update violation through the client.
     * @deny (delete) No one can delete violation through the client.
     * @principle Allows public read access with restricted writes.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}