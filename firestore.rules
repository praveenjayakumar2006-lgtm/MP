/**
 * @file Firebase Security Rules for ParkSmart Reserve - Prototyping Mode
 * @corePhilosophy This ruleset employs a hybrid security model. User data is strictly protected via ownership.
 *   Public read access is permitted on some collections, but writes are restricted to authenticated users or completely disabled where ownership cannot be validated.
 * @dataStructure The data model consists of top-level collections for `parkingSlots`, `reservations`, `violations`, and `feedback`, plus a user-scoped collection for `/users/{userId}`.
 * @keySecurityDecisions
 *   - Users can only access their own user document.
 *   - Public listing is enabled for `parkingSlots` to facilitate discovery.
 *   - Public listing is disabled for `reservations`, `violations`, and `feedback`.
 *   - Schema validation is minimized to focus on authorization during the prototyping phase.
 * @denormalizationForAuthorization Not applicable in this version.
 * @structuralSegregation Not applicable in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user document.
     * @path /users/{userId}
     * @allow (get, list) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can read their own profile.
     * @allow (create, update, delete) User VPZyqqa51tbZOMAVa8WInmGUCzm1 can create, update, and delete their own profile.
     * @deny (get, list) User someoneElseId cannot read user VPZyqqa51tbZOMAVa8WInmGUCzm1's profile.
     * @deny (create, update, delete) User someoneElseId cannot create, update, or delete user VPZyqqa51tbZOMAVa8WInmGUCzm1's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read parking slot information, but restricts creation, updates, and deletes.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read any parking slot.
     * @deny (create, update, delete) No user can create, update or delete parking slots.
     * @principle Allows public read access but restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows only authenticated users to create reservations. No listing allowed.
     * @path /reservations/{reservationId}
     * @allow (create) Authenticated user can create a reservation
     * @deny (get, update, delete) Only authenticated user can perform get, update and delete
     * @principle Enforces authentication for creation and prohibits listing.
     */
    match /reservations/{reservationId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to create violations
     * @path /violations/{violationId}
     * @allow (create) authenticated user can create violations
     * @deny (list, get, update, delete) listing, getting, updating, deleting is not allowed
     * @principle requires users to be authenticated to create violations
     */
    match /violations/{violationId} {
       allow get: if isSignedIn();
       allow list: if false;
       allow create: if isSignedIn();
       allow update: if false;
       allow delete: if false;
    }

    /**
     * @description Allows any authenticated user to create feedback entries.
     * @path /feedback/{feedbackId}
     * @allow (create) Allows any signed-in user to create feedback.
     * @deny (list, get, update, delete) Listing, getting, updating, and deleting feedback are disallowed.
     * @principle Requires authentication for feedback submission.
     */
    match /feedback/{feedbackId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}