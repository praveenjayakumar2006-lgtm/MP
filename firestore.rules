rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the user can read and write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile.
     * @allow (get, update, delete, list) - User with UID 'user_abc' can read, update, and delete their own profile.
     * @deny (create, update, delete, get, list) - User with UID 'user_xyz' cannot access user 'user_abc' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages parking slot information, allowing public read access and restricted write access.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user can read parking slot data.
     * @deny (create, update, delete) - No user can create, update, or delete parking slot data.
     * @principle Allows public read access with restricted write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages reservation data, ensuring only the user who made the reservation can access it.
     * @path /reservations/{reservationId}
     * @allow (create) - User with UID 'user_abc' can create a reservation.
     * @allow (get, update, delete, list) - User with UID 'user_abc' can read, update, and delete their own reservations.
     * @deny (create, update, delete, get, list) - User with UID 'user_xyz' cannot access reservation 'reservation_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == resource.data.userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

      /**
       * @description Manages parking violation data.
       * @path /violations/{violationId}
       * @allow (get, list) - Any user can read violation data.
       * @deny (create, update, delete) - No user can create, update, or delete parking violation data.
       * @principle Allows public read access with restricted write access.
       */
    match /violations/{violationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages user feedback.
     * @path /feedback/{feedbackId}
     * @allow (create) - Any signed in user can submit feedback.
     * @deny (get, update, delete, list) - Signed in user cannot get, update, delete, or list feedback.
     */
    match /feedback/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow create: if isSignedIn();
      allow get: if false;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}