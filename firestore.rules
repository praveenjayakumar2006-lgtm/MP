/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and reservations,
 * while allowing public read access to parking slot information.  Write access to parking slots
 * and violations is generally restricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' must match the Firebase auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information. Publicly readable.
 * - /users/{userId}/reservations/{reservationId}: Stores reservation data for each user. 'userId' from the path
 *   must match the reservation's 'userId' field.
 * - /violations/{violationId}: Stores parking violation data.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own profiles and reservations.
 * - Listing all users is disallowed for privacy.
 * - Parking slot information is publicly readable but generally not writable.
 *
 * Denormalization for Authorization:
 * - Reservations are stored under the user's path (/users/{userId}/reservations/{reservationId}) to simplify
 *   ownership checks.  The userId is also stored in the reservation document itself for redundancy and
 *   to allow easier querying.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profile data. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update their profile if request.auth.uid == 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a profile with ID 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update the profile of 'user_abc'.
     * @deny (list) Listing all users is disallowed for privacy reasons.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures parking slot data. Parking slots are publicly readable but generally not writable.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Anyone can read parking slot information.
     * @deny (create, update, delete) No one can create, update, or delete parking slots.
     * @principle Allows public read access with restricted write access.
     */
    match /parkingSlots/{parkingSlotId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures reservation data for each user. Only the authenticated user can manage their own reservations.
     * @path /users/{userId}/reservations/{reservationId}
     * @allow (create) User with UID 'user_abc' can create a reservation under their profile.
     * @allow (update) User with UID 'user_abc' can update a reservation under their profile.
     * @allow (delete) User with UID 'user_abc' can delete a reservation under their profile.
     * @deny (create) User with UID 'user_xyz' cannot create a reservation under 'user_abc' profile.
     * @deny (update) User with UID 'user_xyz' cannot update a reservation under 'user_abc' profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own reservations.
     */
    match /users/{userId}/reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read rules
      allow get, list: if isOwner(userId);

      // Write rules
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures violation data.  Violations are generally not writable by users.
     * @path /violations/{violationId}
     * @allow (get, list) Anyone can read violation data.
     * @deny (create, update, delete) No one can create, update, or delete violation data.
     */
    match /violations/{violationId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}