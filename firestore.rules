/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data, 
 *              allows public read access to parking slots, reservations, violations, and feedback
 *              but restricts write access to these collections based on authorization checks.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only by the user themselves.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data, publicly readable.
 * - /reservations/{reservationId}: Stores reservation data, publicly readable.
 * - /violations/{violationId}: Stores violation data, publicly readable.
 * - /feedback/{feedbackId}: Stores user feedback, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user data. Listing all users is disallowed.
 * - Parking slot data is publicly readable but requires appropriate authorization for writes (TODO).
 * - Reservation data is publicly readable but requires appropriate authorization for writes (TODO).
 * - Violation data is publicly readable but requires appropriate authorization for writes (TODO).
 * - Feedback data is publicly readable but requires appropriate authorization for writes (TODO).
 *
 * Structural Segregation: No private vs. public segregation is required as user data
 * is stored separately under /users/{userId} and other collections are top-level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and if the resource exists.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces access control for user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is the owner.
     * @allow (create) if the user is creating their own document.
     * @deny (get, update, delete) if the user is not the owner.
     * @deny (create) if the user is not creating their own document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not allowed.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot documents, but restricts write access.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes.
     * @principle Public read access with restricted writes.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to reservation documents, but restricts write access.
     * @path /reservations/{reservationId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes.
     * @principle Public read access with restricted writes.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to violation documents, but restricts write access.
     * @path /violations/{violationId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes.
     * @principle Public read access with restricted writes.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
     * @description Allows public read access to feedback documents, but restricts write access.
     * @path /feedback/{feedbackId}
     * @allow (get, list) public read access
     * @deny (create, update, delete) all writes.
     * @principle Public read access with restricted writes.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}