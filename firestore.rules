/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and allows open reads for parking slots, violations, and feedback.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the authenticated user with matching UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data, publicly readable.
 * - /reservations/{reservationId}: Stores reservation data, enforcing user ownership based on the userId field.
 * - /violations/{violationId}: Stores violation data, requiring authentication for creation.
 * - /feedback/{feedbackId}: Stores feedback data, requiring authentication for creation.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data (ownership model).
 * - Listing of users is explicitly denied.
 * - Parking slot data is publicly readable but not writable.
 * - Reservations are secured by user ID.
 * - Authenticated users can create violation records.
 * - Authenticated users can submit feedback.
 *
 * Denormalization for Authorization:
 * - Reservations include a `userId` field directly on the document, enabling rules to quickly verify ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows only the authenticated user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, list, create, update, delete) if the request.auth.uid matches the userId.
     * @deny (get, list, create, update, delete) if the request.auth.uid does not match the userId.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.  Write operations are denied.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) to all users.
     * @deny (create, update, delete) to all users.
     * @principle Allows public read access to parking slot information.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to create, read, update, and delete their own reservations.
     * @path /reservations/{reservationId}
     * @allow (get, list, create, update, delete) if the request.auth.uid matches the userId in the reservation.
     * @deny (get, list, create, update, delete) if the request.auth.uid does not match the userId in the reservation.
     * @principle Enforces document ownership for all operations on reservations.
     */
    match /reservations/{reservationId} {
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

   /**
     * @description Allows authenticated users to create violation reports. Read, update, and delete operations are denied.
     * @path /violations/{violationId}
     * @allow create if the request is authenticated.
     * @deny get, list, update, delete to all users.
     * @principle Only authenticated users can create violation reports.
     */
    match /violations/{violationId} {
        allow get, list, update, delete: if false;
        allow create: if isSignedIn();
    }

    /**
     * @description Allows authenticated users to create feedback. Read, update, and delete operations are denied.
     * @path /feedback/{feedbackId}
     * @allow create if the request is authenticated.
     * @deny get, list, update, delete to all users.
     * @principle Only authenticated users can create feedback.
     */
    match /feedback/{feedbackId} {
        allow get, list, update, delete: if false;
        allow create: if isSignedIn();
    }
  }

  // Helper function to determine if the user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the existing owner of the document
  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}