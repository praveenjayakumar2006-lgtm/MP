/**
 * @file Firebase Security Rules for ParkSmart Reserve - Prototyping Mode
 * @corePhilosophy This ruleset enforces a user-ownership model for user profiles
 * and allows public read access to parking slots and feedback. Violations can be created by anyone.
 * @dataStructure
 *   - /users/{userId}: Stores individual user profiles, secured by owner-only access.
 *   - /parkingSlots/{parkingSlotId}: Stores parking slot data, publicly readable.
 *   - /reservations/{reservationId}: Stores parking reservation data.
 *   - /violations/{violationId}: Stores parking violation data.
 *   - /feedback/{feedbackId}: Stores user feedback, publicly readable.
 * @keySecurityDecisions
 *   - Users can only read/write their own profile data.
 *   - Listing of users is explicitly denied.
 *   - Parking slot information is publicly available for reading.
 *   - Feedback is publicly readable.
 *   - In this prototyping phase, detailed schema validation is omitted for faster iteration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Allows a user to create their own profile if the userId matches their auth UID.
     * @allow (get, list, update, delete) - Allows the user to read, update, or delete their own profile.
     * @deny (create) - Denies creating a user profile if the userId does not match the authenticated user's ID.
     * @deny (get, list, update, delete) - Denies access to other user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Read Permissions
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Explicitly disallow listing users

      // Write Permissions
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Allows any user (signed in or not) to read parking slot data.
     * @deny (create, update, delete) - Denies all write operations.
     * @principle Grants public read access with restricted writes.
     */
    match /parkingSlots/{parkingSlotId} {
      // Read Permissions
      allow get, list: if true;

      // Write Permissions
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for parking reservations.
     * @path /reservations/{reservationId}
     * @allow (create) - Allows a user to create a reservation for themself.
     * @allow (get, list) - Allows a user to list all their reservations.
     * @allow (update, delete) - Allows a user to update, or delete their own reservation.
     * @deny (create) - Denies creating a reservation if the userId does not match the authenticated user's ID.
     * @deny (get, list, update, delete) - Denies access to other user reservations.
     * @principle Enforces document ownership for writes.
     */
    match /reservations/{reservationId} {
      // Read Permissions
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(request.auth.uid);

      // Write Permissions
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows create access to anyone, with other operations denied
     * @path /violations/{violationId}
     * @allow (create) - Allows any user to create violation data.
     * @deny (get, list, update, delete) - Denies read, update, and delete operations.
     */
    match /violations/{violationId} {
      // Read Permissions
      allow get, list: if false;

      // Write Permissions
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Allows public read and write access to feedback.
     * @path /feedback/{feedbackId}
     * @allow (get, list, create) - Allows all users to read and create feedback.
     * @deny (update, delete) - Denies update and delete operations to prevent tampering.
     */
    match /feedback/{feedbackId} {
      // Read Permissions
      allow get, list: if true;

      // Write Permissions
      allow create: if true;
      allow update, delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}