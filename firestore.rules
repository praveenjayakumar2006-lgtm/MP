/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the ParkSmart Reserve application.
 *
 * Core Philosophy:
 *  - Enforce a combination of user-based and public-read access patterns.
 *  - Prioritize security by default, restricting access where the intent is unclear.
 *  - Leverage denormalization where needed to avoid complex queries in rules.
 *
 * Data Structure:
 *  - /users/{userId}: Stores user profiles, accessible only to the owning user.
 *  - /parkingSlots/{parkingSlotId}: Stores parking slot data, publicly readable.
 *  - /reservations/{reservationId}: Stores reservation data, with owner-only write access.
 *  - /violations/{violationId}: Stores parking violation data.
 *  - /feedback/{feedbackId}: Stores user feedback data. Public read, open create.
 *
 * Key Security Decisions:
 *  - User data is strictly private; listing all users is disallowed.
 *  - Public read access is enabled for Parking Slots.
 *  - Open feedback submission.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can access /users/user123.
     * @allow (create) User with UID 'user123' can create /users/user123 if document.id == user123.
     * @deny (get, update, delete) User with UID 'user456' cannot access /users/user123.
     * @deny (create) User with UID 'user456' cannot create /users/user123.
     * @principle Enforces user-ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing all users.
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure parking slot information. Publicly readable.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot data.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete parking slots.
     * @principle Allows public read access to parking slot availability.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure reservation data.
     * @path /reservations/{reservationId}
     * @allow (get) User with UID 'user123' can access /reservations/reservation123 if they are the owner.
     * @allow (create) User with UID 'user123' can create /reservations/reservation123.
     * @deny (get) User with UID 'user456' cannot access /reservations/reservation123.
     * @deny (update, delete) Only the owner can update/delete a reservation, and only if it exists.
     * @principle Enforces user-ownership for writes, public read.
     */
    match /reservations/{reservationId} {
        allow get: if true;
        allow list: if true; // Allow public listing of reservations
        allow create: if request.auth != null; // Allow anyone to create reservations
        allow update: if request.auth.uid == get(/databases/$(database)/documents/reservations/$(reservationId)).data.userId;
        allow delete: if request.auth.uid == get(/databases/$(database)/documents/reservations/$(reservationId)).data.userId;
    }

    /**
     * @description Secure violation data.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation data.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete violation records.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure feedback data. Allow open submission.
     * @path /feedback/{feedbackId}
     * @allow (get, list) Any user can read feedback.
     * @allow (create) Any signed-in user can create feedback.
     * @deny (update, delete) No one can update or delete feedback.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if request.auth != null;
      allow update, delete: if false;
    }
  }
}