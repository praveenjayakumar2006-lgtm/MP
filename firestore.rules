rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a user-ownership model for user profiles,
     * public read access for parking slots, and authenticated access for reservations,
     * violations, and feedback.
     * @dataStructure
     * - /users/{userId}: User profile data, owned by the user with the matching UID.
     * - /parkingSlots/{parkingSlotId}: Public information about parking slots.
     * - /reservations/{reservationId}: Reservation data.
     * - /violations/{violationId}: Parking violation data.
     * - /feedback/{feedbackId}: User feedback data.
     * @keySecurityDecisions
     * - Users can only read/write their own profile data.
     * - Parking slot data is publicly readable.
     * - Reservations can be created, read, updated, and deleted by authenticated users.
     * - Violations can be created, read, updated, and deleted by authenticated users.
     * - Feedback can be created, read, updated, and deleted by authenticated users.
     * @denormalizationForAuthorization
     * - Not applicable in this ruleset.
     * @structuralSegregation
     * - Not applicable in this ruleset.
     */

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Manages access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, list, update, delete) User with UID 'user123' can read/write their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, list, update, delete) User with UID 'user456' cannot read/write the profile at /users/user123.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Anyone can read parking slot data.
     * @deny (create, update, delete) No one can create, update, or delete parking slot data.
     * @principle Provides public read access to parking slot data, restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages access to reservation data.
     * @path /reservations/{reservationId}
     * @allow (create, get, list, update, delete) Authenticated users can create, read, update, and delete reservation data.
     * @deny (create, get, list, update, delete) Unauthenticated users cannot create, read, update, or delete reservation data.
     * @principle Requires authentication for all reservation data access.
     */
    match /reservations/{reservationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to violation data.
     * @path /violations/{violationId}
     * @allow (create, get, list, update, delete) Authenticated users can create, read, update, and delete violation data.
     * @deny (create, get, list, update, delete) Unauthenticated users cannot create, read, update, or delete violation data.
     * @principle Requires authentication for all violation data access.
     */
    match /violations/{violationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Manages access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow (create, get, list, update, delete) Authenticated users can create, read, update, and delete feedback data.
     * @deny (create, get, list, update, delete) Unauthenticated users cannot create, read, update, or delete feedback data.
     * @principle Requires authentication for all feedback data access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}