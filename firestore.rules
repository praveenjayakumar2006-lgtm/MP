/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and reservations,
 * while allowing public read access to parking slots and violations.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information, publicly readable.
 * - /reservations/{reservationId}: Stores reservation data, accessible only to the user who made the reservation.
 * - /violations/{violationId}: Stores violation data, publicly readable.
 *
 * Key Security Decisions:
 * - Users can only create, update, and delete their own profile and reservations.
 * - Listing of users is disallowed.
 * - Parking slots and violations are publicly readable but not writable by clients.
 *
 * Denormalization for Authorization:
 *  - Reservations have a `userId` field that must match the authenticated user's UID for write access. This avoids costly `get()` calls to the `/users/{userId}` document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read, create, update, and delete their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with UID 'user123' can access /users/user123.
     * @deny (get, create, update, delete) User with UID 'user456' cannot access /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot information.
     * @deny (create, update, delete) No user can create, update, or delete parking slots.
     * @principle Provides public read access with restricted write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to create, read, update and delete their own reservations.
     * @path /reservations/{reservationId}
     * @allow (create) User with UID 'user123' can create a reservation with userId 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can access their own reservation.
     * @deny (create) User with UID 'user456' cannot create a reservation with userId 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot access reservation belonging to user 'user123'.
     * @principle Enforces document ownership for writes; allows public reads.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    /**
     * @description Allows public read access to violation data.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation data.
     * @deny (create, update, delete) No user can create, update, or delete violations.
     * @principle Provides public read access with restricted write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}