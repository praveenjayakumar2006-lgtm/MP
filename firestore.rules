/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User profiles are protected under strict ownership,
 * parking slots and violations are publicly readable, and feedback is enabled for all users including anonymous.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 * - /parkingSlots/{parkingSlotId}: Stores publicly readable parking slot information.
 * - /reservations/{reservationId}: Stores reservation details, accessible only to the user who created the reservation.
 * - /violations/{violationId}: Stores publicly readable violation data.
 * - /feedback/{feedbackId}: Stores user feedback, publicly readable and writable.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Public read access is granted to parking slots and violations for general app functionality.
 * - Feedback is open to all users, including anonymous, to encourage user input.
 *
 * Denormalization for Authorization:
 *  - The `Reservation` entity includes a `userId` field, denormalizing the user ID to enable direct ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the document.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {boolean} True if the request is made by the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the existing document.
     * @param {string} userId - The user ID to compare against the existing document's owner ID.
     * @return {boolean} True if the request is made by the existing owner, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines rules for user documents, enforcing ownership.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can update/delete their own profile.
     * @deny (create) - Unauthenticated user cannot create any user profiles.
     * @deny (get, list) - Unauthenticated user cannot access any user profiles.
     * @deny (update, delete) - Unauthenticated user cannot modify/delete any user profiles.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines rules for parking slot documents, allowing public read access.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user (signed in or not) can view parking slot data.
     * @deny (create, update, delete) - No user can create, update, or delete parking slots through the client.
     * @principle Grants public read access while restricting write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines rules for reservation documents, enforcing user-based access.
     * @path /reservations/{reservationId}
     * @allow (create) - Authenticated user can create a reservation if the userId matches their auth UID.
     * @allow (get, list) - Authenticated user can read their own reservations.
     * @allow (update, delete) - Authenticated user can update/delete their own reservations.
     * @deny (create) - Unauthenticated user cannot create any reservations.
     * @deny (get, list) - Unauthenticated user cannot access any reservations.
     * @deny (update, delete) - Unauthenticated user cannot modify/delete any reservations.
     * @principle Enforces document ownership for reservations.
     */
    match /reservations/{reservationId} {
      allow get, list: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Defines rules for violation documents, allowing public read access.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user (signed in or not) can view violation data.
     * @deny (create, update, delete) - No user can create, update, or delete violations through the client.
     * @principle Grants public read access while restricting write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines rules for feedback documents, allowing public access.
     * @path /feedback/{feedbackId}
     * @allow (get, list, create) - Any user (signed in or not) can view and submit feedback.
     * @deny (update, delete) - No user can update or delete feedback.
     * @principle Grants public read and create access while restricting update and delete access.
     */
    match /feedback/{feedbackId} {
      allow get, list, create: if true;
      allow update, delete: if false;
    }
  }
}