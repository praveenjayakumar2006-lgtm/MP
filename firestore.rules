/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of ownership-based access control for user data
 *              and public read access for certain collections like parking slots and feedback.
 *              Write access to parking slots and feedback is restricted to authorized users, while
 *              user profiles are only accessible and modifiable by the respective user.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information.
 * - /reservations/{reservationId}: Stores reservation data.
 * - /violations/{violationId}: Stores parking violation data.
 * - /feedback/{feedbackId}: Stores user feedback.
 *
 * Key Security Decisions:
 * - User data is strictly controlled: only the authenticated user can read or write their own profile.
 * - Listing of users is disallowed.
 * - Parking slots and feedback are publicly readable but require authentication for write operations.
 * - All write operations (create, update, delete) require a valid authentication state.
 *
 * Denormalization for Authorization:
 *  - The `Reservation` entity contains a `userId` field to enable rules that restrict access to a
 *    reservation based on the user that created it.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile document at /users/user_abc. The document `id` must also be `user_abc`.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their profile document at /users/user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create a profile document at /users/user_xyz.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the profile document at /users/user_abc.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allow public read access to parking slot information, but require authentication for write operations.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user, authenticated or not, can read parking slot data.
     * @allow (create) - Authenticated user can create a parking slot.
     * @allow (update, delete) - Authenticated user can update or delete a parking slot.
     * @deny (create, update, delete) - Unauthenticated user cannot create, update, or delete parking slots.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /parkingSlots/{parkingSlotId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Secure reservation data. Only the user who created the reservation can access or modify it.
     * @path /reservations/{reservationId}
     * @allow (create) - User with UID 'user_abc' can create a reservation document where `userId` is also 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their own reservation.
     * @deny (create) - User with UID 'user_abc' cannot create a reservation document where `userId` is 'user_xyz'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete a reservation belonging to 'user_abc'.
     * @principle Enforces ownership for reservations based on the `userId` field.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if request.auth.uid == resource.data.userId;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Secure parking violation data. Only authenticated users can manage violation records.
     * @path /violations/{violationId}
     * @allow (get, list) - Any authenticated user can read violation data.
     * @allow (create) - Any authenticated user can create a violation record.
     * @allow (update, delete) - Any authenticated user can update or delete a violation record.
     * @deny (create, update, delete) - Unauthenticated users cannot manage violation records.
     * @principle Requires authentication for all write operations on violation records.
     */
    match /violations/{violationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allow public read access to feedback, but require authentication for write operations.
     * @path /feedback/{feedbackId}
     * @allow (get, list) - Any user can read feedback.
     * @allow (create) - Any authenticated user can submit feedback.
     * @allow (update, delete) - Any authenticated user can update or delete feedback.
     * @deny (create, update, delete) - Unauthenticated user cannot submit, update, or delete feedback.
     * @principle Allows public read access while restricting write access to authenticated users.
     */
    match /feedback/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}