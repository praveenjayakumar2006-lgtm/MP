/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User-specific data (profiles, reservations) is protected by strict ownership.
 * Public data (parking slots) is readable by anyone. Violations and Feedback are currently public-read, public-write.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, where {userId} matches the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Publicly readable parking slot data.
 * - /reservations/{reservationId}: Reservation data, owned by the user who created it.
 * - /violations/{violationId}: Parking violation data. Currently open access.
 * - /feedback/{feedbackId}: User feedback data. Currently open access.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Parking slot information is publicly readable.
 * - Users can only manage their own reservations.
 * - Listing of the violations and feedback collections is currently public.
 *
 * Denormalization for Authorization:
 * - Reservations store the userId to enforce ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user can read parking slot information.
     * @deny (create, update, delete) - No user can create, update, or delete parking slot information.
     * @principle Allows public read access to parking slot data, restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to reservation data.
     * @path /reservations/{reservationId}
     * @allow (create) - User with UID 'user123' can create a reservation with userId 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own reservation.
     * @deny (create) - User with UID 'user456' cannot create a reservation for 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the reservation of 'user123'.
     * @principle Enforces document ownership for reservation management.
     */
    match /reservations/{reservationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(resource.data.userId);
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isOwner(resource.data.userId) && resource != null;
      allow delete: if isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to parking violation data.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user can read violation information.
     * @deny (create, update, delete) - No user can create, update, or delete violation information.
     * @principle Allows public read access to violations data, restricts write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add restricted access, potentially for admin users only.
    }

    /**
     * @description Controls access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow (get, list, create) - Any user can read, list and create feedback.
     * @deny (update, delete) - No user can update, or delete feedback information.
     * @principle Allows public read and write access to feedback data, restricts update and delete access.
     */
    match /feedback/{feedbackId} {
      allow get, list, create: if true;
      allow update, delete: if false; // TODO: Add restricted access, potentially for admin users only.
    }
  }
}