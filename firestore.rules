/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection. Users can only access their own profiles and create reservations for themselves.
 * Parking slot and violation data are publicly accessible, while feedback submission is open to all.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, where {userId} matches the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Parking slot information.
 * - /reservations/{reservationId}: Reservation data. Each reservation includes the userId of the user who made it.
 * - /violations/{violationId}: Parking violation data.
 * - /feedback/{feedbackId}: User feedback.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Listing of user documents is denied.
 * - Parking slot and violation data are publicly readable, but only writeable through the Firebase Console (not via client SDK).
 * - Reservations can be created by any logged-in user, but updates and deletions are not allowed via client SDKs.
 * - Feedback submissions are open to all (no authentication required).
 *
 * Denormalization for Authorization:
 * - Reservations include the 'userId' to easily verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with matching {userId} can access their own document.
     * @allow (create) User can create their own document if the {userId} matches their auth UID.
     * @deny (get, update, delete) User cannot access other user's documents.
     * @deny (list) Listing of user documents is not allowed.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot data. Write access is restricted.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot data.
     * @deny (create, update, delete) No client-side writes allowed for parking slots.
     * @principle Provides public read access while restricting write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to create reservations.
     * @path /reservations/{reservationId}
     * @allow (create) Any authenticated user can create a reservation.
     * @deny (get, list, update, delete) No client-side get, list, update, or delete operations allowed for reservations.
     * @principle Allows reservation creation, but restricts further modifications.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list, update, delete: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows public read access to violation data. Write access is restricted.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation data.
     * @deny (create, update, delete) No client-side writes allowed for violations.
     * @principle Provides public read access while restricting write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to submit feedback.
     * @path /feedback/{feedbackId}
     * @allow (create) Any user can submit feedback.
     * @deny (get, list, update, delete) No client-side get, list, update, or delete operations allowed for feedback.
     * @principle Allows open feedback submission.
     */
    match /feedback/{feedbackId} {
      allow get, list, update, delete: if false;
      allow create: if true;
    }
  }
}