/**
 * @fileOverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User profiles are strictly owned by the authenticated user.
 * Reservations are also strictly user-owned. Parking slots are publicly readable but not writable by clients.
 * User Feedback and Violations are publicly readable, but writes are not currently permitted by clients.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, where {userId} matches the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Parking slot details.
 * - /reservations/{reservationId}: Reservation records, linked to users via userId.
 * - /violations/{violationId}: Parking violation logs.
 * - /feedback/{feedbackId}: User feedback submissions.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - All write operations require authentication (`request.auth != null`).
 * - Strict ownership is enforced for user profiles and reservations.
 * - Public read access is granted for parking slots, violations, and feedback.
 *
 * Denormalization for Authorization:
 * - The 'Reservation' entity contains a 'userId' field, which is used to enforce ownership.  This avoids the need for complex lookups.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile with a mismatched userId.
     * @allow (get, update, delete) Authenticated user can access and modify their own profile.
     * @deny (get, update, delete) Authenticated user cannot access or modify other user profiles.
     * @allow (list) Listing users is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId);
      }
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot information.
     * @deny (create, update, delete) No user can create, update, or delete parking slot information via the client.
     * @principle Provides public read access for parking slot data, restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to reservation data.
     * @path /reservations/{reservationId}
     * @allow (create) Authenticated user can create a reservation for themselves.
     * @deny (create) Authenticated user cannot create a reservation for another user.
     * @allow (get, update, delete) Authenticated user can access and modify their own reservations.
     * @deny (get, update, delete) Authenticated user cannot access or modify other user reservations.
     * @allow (list) No user can list all reservations.
     * @principle Enforces document ownership for reservations.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

       function isCreatingForSelf() {
        return request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner() {
        return isOwner();
      }

      allow create: if isSignedIn() && isCreatingForSelf();
      allow get: if isSignedIn() && isOwner();
      allow list: if false;
      allow update: if isSignedIn() && isExistingOwner() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner();
    }

    /**
     * @description Controls access to violation data.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation information.
     * @deny (create, update, delete) No user can create, update, or delete violation information via the client.
     * @principle Provides public read access for violation data, restricts write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow (get, list) Any user can read submitted feedback.
     * @deny (create, update, delete) No user can create, update, or delete feedback data via the client.
     */
    match /feedback/{feedbackId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}