/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user data and reservations,
 * with public read access to parking slot and violation data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' must match the authenticated user's UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information. Publicly readable.
 * - /reservations/{reservationId}: Stores reservation data. Publicly listable.
 * - /violations/{violationId}: Stores violation data. Publicly readable.
 *
 * Key Security Decisions:
 * - Users can only create, update, or delete their own profile data under /users/{userId}.
 * - Reservations have public list permissions
 * - Parking slots and violations are publicly readable but writes are not permitted at this stage.
 *
 * Denormalization for Authorization:
 * - Reservations contain a `userId` field, which must match the authenticated user's UID when creating a reservation.
 *
 * Structural Segregation:
 * - User data is segregated under the /users/{userId} path to enforce strict access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @principle Enforces document ownership for writes; Users can only manage their own profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Grants public read access to parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user (or no user) can read parking slot information.
     * @deny (create, update, delete) No one can create, update, or delete parking slots (writes are disabled).
     * @principle Allows public read access while restricting write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Grants access to reservation data.
     * @path /reservations/{reservationId}
     * @allow (create) User with UID 'user123' can create a reservation if request.resource.data.userId == 'user123'.
     * @allow (list) Any user can list reservations.
     * @deny (create) User with UID 'user456' cannot create a reservation for 'user123'.
     * @principle Enforces that the user ID in the reservation matches the authenticated user.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to violation data.
     * @path /violations/{violationId}
     * @allow (get, list) Any user (or no user) can read violation information.
     * @deny (create, update, delete) No one can create, update, or delete violations (writes are disabled).
     * @principle Allows public read access while restricting write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}