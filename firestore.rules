/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model, combining user-based access control for personal data with public read access for shared resources and administrative control over violations.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user themselves.
 * - /parkingSlots/{parkingSlotId}: Publicly readable parking slot information.
 * - /reservations/{reservationId}: Reservation data, accessible only to the user who created the reservation.
 * - /violations/{violationId}: Parking violation data, publicly accessible.
 * - /feedback/{feedbackId}: User feedback, publicly accessible.
 *
 * Key Security Decisions:
 * - User data is strictly controlled; users can only access their own profiles.
 * - Listing of users is disallowed to prevent enumeration.
 * - Public read access is granted for parking slots, violations, and feedback to facilitate app functionality.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-based access control for user profile data.
     * @path /users/{userId}
     * @allow (create) - A user can create their own profile if the UID matches the document ID.
     * @allow (get, update, delete) - A user can only access their own profile.
     * @deny (create) - A user cannot create a profile with a different UID.
     * @deny (get, update, delete) - A user cannot access another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disallow listing users.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user can read parking slot data.
     * @deny (create, update, delete) - No user can create, update, or delete parking slots.
     * @principle Public read access with restricted writes.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-based access control for reservations.
     * @path /reservations/{reservationId}
     * @allow (create) - A user can create a reservation for themself.
     * @allow (get, update, delete) - A user can only access and modify their own reservations.
     * @deny (create) - A user cannot create a reservation for another user.
     * @deny (get, update, delete) - A user cannot access or modify another user's reservations.
     * @principle Enforces document ownership for writes.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        allow get: if isSignedIn() && get(/databases/$(database)/documents/reservations/$(reservationId)).data.userId == request.auth.uid;
        allow list: if false; // Listing all reservations is not allowed.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/reservations/$(reservationId)).data.userId == request.auth.uid;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/reservations/$(reservationId)).data.userId == request.auth.uid;
    }

    /**
     * @description Allows public read access to parking violation data.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user can read violation data.
     * @deny (create, update, delete) - No user can create, update, or delete violations.
     * @principle Public read access with restricted writes.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to user feedback data.
     * @path /feedback/{feedbackId}
     * @allow (get, list) - Any user can read feedback data.
     * @deny (create, update, delete) - No user can create, update, or delete feedback.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}