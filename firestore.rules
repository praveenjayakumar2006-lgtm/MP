/**
 * @description: This ruleset enforces a user-ownership model for user profiles and reservations. Parking slot and violation data are publicly readable but writable only with a valid ownership claim.
 * @data_structure:
 *  - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 *  - /parkingSlots/{parkingSlotId}: Stores parking slot data, publicly readable.
 *  - /reservations/{reservationId}: Stores reservation data, accessible only to the user who made the reservation.
 *  - /violations/{violationId}: Stores violation data, publicly readable.
 * @key_security_decisions:
 *  - User listing is disallowed for privacy.
 *  - Public read access is granted to parkingSlots and violations to support the core app requirement of showing real-time parking availability.
 *  - All write operations require a valid authentication token (user must be signed in).
 * @denormalization_for_authorization:
 *  - Reservations include the userId to simplify ownership checks.
 * @structural_segregation:
 *  - User-specific data (reservations) is segregated under /users/{userId} to maintain a consistent security posture.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description: Manages user profile data. Only the authenticated user can read or write their own profile.
     * @path: /users/{userId}
     * @allow: (create) Authenticated user with UID 'user123' can create a profile at /users/user123.
     * @deny: (create) Authenticated user with UID 'user123' cannot create a profile at /users/anotherUser.
     * @principle: Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description: Manages parking slot data. Parking slots are publicly readable but writes are restricted.
     * @path: /parkingSlots/{parkingSlotId}
     * @allow: (get) Any user can read parking slot data.
     * @deny: (create) No user can create parking slot data through client.
     * @principle: Public read access with restricted writes.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description: Manages reservation data. Only the authenticated user who owns the reservation can read or write it.
     * @path: /reservations/{reservationId}
     * @allow: (create) Authenticated user with UID 'user123' can create a reservation with userId 'user123'.
     * @deny: (create) Authenticated user with UID 'user123' cannot create a reservation with userId 'anotherUser'.
     * @principle: Enforces document ownership for writes.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description: Manages violation data. Violations are publicly readable but writes are restricted.
     * @path: /violations/{violationId}
     * @allow: (get) Any user can read violation data.
     * @deny: (create) No user can create violation data through client.
     * @principle: Public read access with restricted writes.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}