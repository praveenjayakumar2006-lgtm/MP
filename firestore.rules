/**
 * @file Firestore Security Rules for ParkSmart Reserve - Prototyping Mode
 * @core_philosophy This ruleset prioritizes secure authorization based on user identity and resource ownership.
 *   Schema validation is relaxed to enable rapid prototyping.
 * @data_structure
 *   - /users/{userId}: User profile data, where userId is the Firebase Auth UID.
 *   - /parkingSlots/{parkingSlotId}: Parking slot information.
 *   - /reservations/{reservationId}: Parking reservations.
 *   - /violations/{violationId}: Parking violations.
 *   - /feedback/{feedbackId}: User feedback.
 * @key_security_decisions
 *   - Users can only read/write their own user documents.
 *   - Feedback collection is publicly readable, but writes are disallowed.
 *   - Listing of feedback is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - A user can create their own document if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can read, update, or delete their own document.
     * @deny (create) - A user cannot create a document with a userId that does not match their auth UID.
     * @deny (get, update, delete) - A user cannot read, update, or delete another user's document.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to parking slot documents.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user can read parking slot information.
     * @deny (create, update, delete) - No user can create, update, or delete parking slot information.
     * @principle Read-only access to parking slot data.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to reservation documents.
     * @path /reservations/{reservationId}
     * @allow (create) - A user can create a reservation if the userId matches their auth UID.
     * @allow (get, update, delete) - A user can read, update, or delete their own reservations.
     * @deny (create) - A user cannot create a reservation with a userId that does not match their auth UID.
     * @deny (get, update, delete) - A user cannot read, update, or delete reservations they don't own.
     * @principle Enforces ownership for reservation management.
     */
    match /reservations/{reservationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(resource.data.userId);
      allow list: if false;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to violation documents.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user can read violation information.
     * @deny (create, update, delete) - No user can create, update, or delete violation data.
     * @principle Read-only access to violation data.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to feedback documents.
     * @path /feedback/{feedbackId}
     * @allow get - Any user can read feedback.
     * @deny list - No user can list feedback.
     * @deny (create, update, delete) - No user can create, update, or delete feedback.
     * @principle Public read-only access to feedback data.
     */
    match /feedback/{feedbackId} {
      allow get: if true;
      allow list: if false;
      allow create, update, delete: if false;
    }
  }
}