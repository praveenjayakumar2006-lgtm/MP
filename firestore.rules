/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and open access
 * to parking slot information. Reservations are also governed by user ownership.
 * Feedback data is publicly accessible. Parking violations are also publicly available
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, where {userId} matches the Firebase auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information.
 * - /reservations/{reservationId}: Stores reservation data, with a userId field indicating the owner.
 * - /violations/{violationId}: Stores parking violation data.
 * - /feedback/{feedbackId}: Stores user feedback data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing users is disallowed.
 * - Parking slot information is publicly readable.
 * - Reservations are restricted to the owning user.
 * - Feedback is publicly writable but read is restricted to authenticated users.
 * - Parking Violations are publicly readable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile.
     * @allow (get) User with UID 'user_abc' can read their own profile.
     * @allow (update) User with UID 'user_abc' can update their own profile.
     * @allow (delete) User with UID 'user_abc' can delete their own profile.
     * @deny (create) User with UID 'user_abc' cannot create a profile for 'user_xyz'.
     * @deny (get) User with UID 'user_abc' cannot read the profile of 'user_xyz'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get) Any user can read parking slot information.
     * @allow (list) Any user can list parking slots.
     * @deny (create) No one can create parking slot information.
     * @deny (update) No one can update parking slot information.
     * @deny (delete) No one can delete parking slot information.
     * @principle Allows public read access while restricting write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces user-ownership for reservations.
     * @path /reservations/{reservationId}
     * @allow (create) User with UID 'user_abc' can create a reservation with userId 'user_abc'.
     * @allow (get) User with UID 'user_abc' can read a reservation with userId 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a reservation with userId 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a reservation with userId 'user_abc'.
     * @deny (create) User with UID 'user_abc' cannot create a reservation with userId 'user_xyz'.
     * @deny (get) User with UID 'user_abc' cannot read a reservation with userId 'user_xyz'.
     * @principle Enforces document ownership for all operations.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isReservationOwner(reservation) {
            return request.auth.uid == reservation.userId;
        }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn(); // All authenticated users can list all reservations
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Allows public read access to violation data.
     * @path /violations/{violationId}
     * @allow (get) Any user can read violation data.
     * @allow (list) Any user can list violations.
     * @deny (create) No one can create violation data.
     * @deny (update) No one can update violation data.
     * @deny (delete) No one can delete violation data.
     * @principle Allows public read access while restricting write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public write access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow (create) Any user can create feedback data.
     * @deny (get) No one can get feedback data.
     * @deny (list) No one can list feedback data.
     * @deny (update) No one can update feedback data.
     * @deny (delete) No one can delete feedback data.
     */
    match /feedback/{feedbackId} {
        allow get: if isSignedIn();
        allow list: if false;
      allow create: if true;
      allow update, delete: if false;
    }
  }
}