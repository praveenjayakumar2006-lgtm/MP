/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and open reads for parking slots, reservations, violations and feedback.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles. 'userId' must match the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data. Publicly readable.
 * - /reservations/{reservationId}: Stores reservation data. Publicly readable.
 * - /violations/{violationId}: Stores violation data. Publicly readable.
 * - /feedback/{feedbackId}: Stores user feedback. Publicly readable.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the individual user (ownership model).
 * - Listing of users is disallowed.
 * - Parking slots, reservations, violations, and feedback data are publicly readable but not writable directly by clients.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create, update, delete) User with matching UID can modify their profile.
     * @deny (create, update, delete) User attempts to modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to parking slot data.
     * @path /databases/{database}/documents/parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot data.
     * @deny (create, update, delete) No direct client writes allowed.
     * @principle Public read access with restricted writes.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read access to reservation data.
     * @path /databases/{database}/documents/reservations/{reservationId}
     * @allow (get, list) Any user can read reservation data.
     * @deny (create, update, delete) No direct client writes allowed.
     * @principle Public read access with restricted writes.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read access to violation data.
     * @path /databases/{database}/documents/violations/{violationId}
     * @allow (get, list) Any user can read violation data.
     * @deny (create, update, delete) No direct client writes allowed.
     * @principle Public read access with restricted writes.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allow public read access to feedback data.
      * @path /databases/{database}/documents/feedback/{feedbackId}
      * @allow (get, list) Any user can read feedback data.
      * @deny (create, update, delete) No direct client writes allowed.
      * @principle Public read access with restricted writes.
      */
    match /feedback/{feedbackId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }
  }
}