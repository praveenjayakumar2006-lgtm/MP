/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * allowing users to read and write their own data. Other collections
 * (parkingSlots, reservations, violations, feedback) are publicly readable,
 * but writes are restricted to prevent unauthorized modifications.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching
 *   the Firebase Authentication UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data. Publicly readable.
 * - /reservations/{reservationId}: Stores reservation data. Publicly readable.
 * - /violations/{violationId}: Stores violation data. Publicly readable.
 * - /feedback/{feedbackId}: Stores user feedback. Publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to prevent enumeration.
 * - The rules prioritize security and data protection. Write access to the
 *   parkingSlots, reservations, and violations collections is disabled to
 *   prevent unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (get, list) User with matching UID can read their own profile.
     * @allow (create, update, delete) User with matching UID can modify their own profile.
     * @deny (get, list) User cannot read another user's profile.
     * @deny (create, update, delete) User cannot modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Disallowing listing for security.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to parking slot data. Write access is denied.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Anyone can read parking slot data.
     * @deny (create, update, delete) No one can modify parking slot data through the client.
     * @principle Provides public information while restricting modifications.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to reservation data. Write access is denied.
     * @path /reservations/{reservationId}
     * @allow (get, list) Anyone can read reservation data.
     * @deny (create, update, delete) No one can modify reservation data through the client.
     * @principle Provides public information while restricting modifications.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to violation data. Write access is denied.
     * @path /violations/{violationId}
     * @allow (get, list) Anyone can read violation data.
     * @deny (create, update, delete) No one can modify violation data through the client.
     * @principle Provides public information while restricting modifications.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to feedback data. Write access is denied.
     * @path /feedback/{feedbackId}
     * @allow (get, list) Anyone can read feedback data.
     * @deny (create, update, delete) No one can modify feedback data through the client.
     * @principle Provides public information while restricting modifications.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}