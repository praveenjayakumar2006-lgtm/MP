/**
 * @description This ruleset enforces a strict user-ownership model for user profiles,
 * allows public read access to parking slots, and requires authentication for creating violations and submitting feedback.
 * @dataStructure
 * - /users/{userId}: Stores user profile data, with 'userId' matching the Firebase auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information; publicly readable.
 * - /reservations/{reservationId}: Stores reservation data, no explicit owner relationship defined, owner-only access.
 * - /violations/{violationId}: Stores parking violation data, anyone with an account can create, but can only read their own..
 * - /feedback/{feedbackId}: Stores user feedback, anyone with an account can create, no read.
 * @keySecurityDecisions
 * - Users can only read and write their own profile data.
 * - Listing of users is explicitly denied.
 * - Parking slot data is publicly readable to facilitate display and selection.
 * - Reservations are restricted to owner-only access.
 * - Violations can be created by any authenticated user.
 * - Feedback can be created by any authenticated user.
 * @denormalizationForAuthorization
 * - No denormalization is currently used, but consider adding an ownerId or similar field to Reservations and Violations to simplify ownership checks and improve rule performance.
 * @structuralSegregation
 * - All data is stored in top-level collections without private subcollections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, create, update, delete, list) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) if true
     * @allow (create, update, delete) if false
     * @deny (create, update, delete) if true
     * @principle Allows public read access to parking slot data.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

     /**
      * @description Allows only the owner to read and write reservation data.
      * @path /reservations/{reservationId}
      * @allow (get, list, create, update, delete) if isOwner(resource.data.userId)
      * @deny (get, list, create, update, delete) if !isOwner(resource.data.userId)
      * @principle Enforces document ownership for all operations on reservation data.
      */
    match /reservations/{reservationId} {
        allow get: if isSignedIn() && isOwner(resource.data.userId);
        allow list: if isSignedIn() && isOwner(resource.data.userId);
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
        allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows any authenticated user to create violation reports. Read/Write access is restricted to the owner.
     * @path /violations/{violationId}
     * @allow create: if request.auth != null
     * @allow get: if isOwner(resource.data.userId)
     * @allow list: if isOwner(resource.data.userId)
     * @allow update, delete: if isOwner(resource.data.userId) && resource != null
     * @deny create: if request.auth == null
     * @principle Authenticated users can create, but owner only to read/write.
     */
    match /violations/{violationId} {
      allow get: if isSignedIn();
      allow list: if false; // Listing violations is not permitted
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows any authenticated user to create feedback. No read access is allowed.
     * @path /feedback/{feedbackId}
     * @allow create: if request.auth != null
     * @deny get, list, update, delete
     * @principle Feedback creation is open to authenticated users; no read access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }

    /**
     * @description Helper function to determine if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to determine if the requesting user is the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Helper function to determine if the requesting user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}