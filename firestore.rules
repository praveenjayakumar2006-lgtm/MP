/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection and enforces a strict
 * ownership model for user-related data. Public data (e.g., parking slots)
 * is readable by all, but write access is carefully controlled.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information.
 * - /reservations/{reservationId}: Stores reservation details.
 * - /violations/{violationId}: Stores violation records.
 * - /feedback/{feedbackId}: Stores user feedback.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Listing of reservations is not permitted to prevent data leakage.
 * - Parking slot information is publicly readable, but writes are restricted.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 *  - The reservations collection does not contain a denormalized authorId or ownerId field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the owner can read or write.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can read/update/delete their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot read/update/delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, update, delete: if isOwner(userId);
      allow create: if request.auth != null && request.auth.uid == userId;
      allow list: if false;
    }

    /**
     * @description Allows public read access to parking slot information. Write access is not defined at this time.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot information.
     * @deny (create, update, delete) No user can create, update, or delete parking slots.
     * @principle Allows public read access, restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages reservation data, restricting access based on user ID.
     * @path /reservations/{reservationId}
     * @allow (create) Authenticated user can create a reservation with a matching userId.
     * @allow (get, update, delete) Authenticated user can get, update, or delete a reservation where the userId matches.
     * @deny (create) User cannot create a reservation with a mismatched userId.
     * @deny (get, update, delete) User cannot get, update, or delete another user's reservation.
     * @principle Enforces document ownership for writes.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
          return request.auth != null;
      }

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;
    }

    /**
     * @description Manages violation data. Write access is not defined at this time.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation data.
     * @deny (create, update, delete) No user can create, update, or delete violation data.
     * @principle Allows public read access, restricts write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages feedback data. Write access is not defined at this time.
     * @path /feedback/{feedbackId}
     * @allow (create) Any user can submit feedback.
     * @deny (get, list, update, delete) Feedback can not be read or modified by anyone
     */
    match /feedback/{feedbackId} {
        function isSignedIn() {
            return request.auth != null;
        }

        // Everybody can create feedback. We're in prototyping.
        allow create: if true; 
        allow get, list, update, delete: if false;
    }
  }
}