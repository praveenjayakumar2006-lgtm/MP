/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles and open access for parking slots,
 * reservations, violations, and feedback.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'userId' matching the Firebase auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information.
 * - /reservations/{reservationId}: Stores parking reservations.
 * - /violations/{violationId}: Stores parking violation data.
 * - /feedback/{feedbackId}: Stores user feedback.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Listing of reservations is disallowed for now.
 * - Parking slots, violations, and feedback are publicly readable. Writes are not explicitly allowed in this
 *   initial prototyping phase and should be secured later.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @deny (create) User with UID 'user123' cannot create a profile for 'user456'.
     * @allow (get) User with UID 'user123' can read their own profile.
     * @deny (get) User with UID 'user123' cannot read the profile of 'user456'.
     * @allow (update) User with UID 'user123' can update their own profile.
     * @deny (update) User with UID 'user123' cannot update the profile of 'user456'.
     * @allow (delete) User with UID 'user123' can delete their own profile.
     * @deny (delete) User with UID 'user123' cannot delete the profile of 'user456'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get) Any user can retrieve parking slot data.
     * @allow (list) Any user can list parking slot data.
     * @deny (create) No user can create parking slot data (unsecured).
     * @deny (update) No user can update parking slot data (unsecured).
     * @deny (delete) No user can delete parking slot data (unsecured).
     * @principle Provides open read access while restricting write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to reservation data.
     * @path /reservations/{reservationId}
     * @allow (get) Any user can retrieve reservation data.
     * @deny (list) Listing of reservations is explicitly denied.
     * @deny (create) No user can create reservation data (unsecured).
     * @deny (update) No user can update reservation data (unsecured).
     * @deny (delete) No user can delete reservation data (unsecured).
     * @principle Provides open read access while restricting write access.
     */
    match /reservations/{reservationId} {
      allow get: if true;
      allow list: if false;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to violation data.
     * @path /violations/{violationId}
     * @allow (get) Any user can retrieve violation data.
     * @allow (list) Any user can list violation data.
     * @deny (create) No user can create violation data (unsecured).
     * @deny (update) No user can update violation data (unsecured).
     * @deny (delete) No user can delete violation data (unsecured).
     * @principle Provides open read access while restricting write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow (get) Any user can retrieve feedback data.
     * @allow (list) Any user can list feedback data.
     * @deny (create) No user can create feedback data (unsecured).
     * @deny (update) No user can update feedback data (unsecured).
     * @deny (delete) No user can delete feedback data (unsecured).
     * @principle Provides open read access while restricting write access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}