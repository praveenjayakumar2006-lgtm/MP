/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection, role-based access and data integrity.
 * Access is strictly controlled based on user authentication and ownership.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. 'userId' matches the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data. Publicly readable.
 * - /reservations/{reservationId}: Stores reservation data.
 * - /violations/{violationId}: Stores parking violation data.
 * - /feedback/{feedbackId}: Stores user feedback.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data.
 * - Listing of users is disallowed.
 * - Parking slots are publicly readable but only writeable with proper authorization (TODO).
 * - Reservations are only accessible to authenticated users and can only be created for themselves.
 * - Feedback can be created by anyone.
 *
 * Denormalization for Authorization:
 *  - Reservations include the userId to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) Authenticated user accessing their own profile.
     * @allow (create) Authenticated user creating their own profile.
     * @deny (get, update, delete) Authenticated user accessing another user's profile.
     * @deny (list) Listing of all users is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manage parking slot information. Publicly readable.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Public read access to parking slot data.
     * @deny (create, update, delete) No write access for regular users.
     * @principle Public read, restricted write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based write access for admins only.
    }

    /**
     * @description Secure access to reservation data.
     * @path /reservations/{reservationId}
     * @allow (create) Authenticated user creating a reservation for themselves.
     * @allow (get, list, update, delete) Authenticated user accessing their own reservations.
     * @deny (create, update, delete) Non-authenticated users cannot create, update, or delete reservations.
     * @deny (get, list, update, delete) Authenticated user accessing another user's reservations.
     * @principle Enforces user-owned reservations.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

        function isReservationOwner() {
            return resource.data.userId == request.auth.uid;
        }

        function isExistingReservationOwner() {
            return isReservationOwner() && resource != null;
        }
      allow get: if isSignedIn() && isReservationOwner();
      allow list: if isSignedIn() && isOwner(request.auth.uid);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingReservationOwner();
      allow delete: if isSignedIn() && isExistingReservationOwner();
    }

    /**
     * @description Secure access to violation data.
     * @path /violations/{violationId}
     * @allow (get, list) Public read access to violations data.
     * @deny (create, update, delete) No write access for regular users.
     * @principle Public read, restricted write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add role-based write access for admins only.
    }

    /**
     * @description Allow anyone to create feedback.
     * @path /feedback/{feedbackId}
     * @allow (create) Anyone can create feedback.
     * @deny (get, list, update, delete) No read, update, or delete access.
     * @principle Public creation, no further access.
     */
    match /feedback/{feedbackId} {
      allow get, list, update, delete: if false;
      allow create: if true;
    }
  }
}