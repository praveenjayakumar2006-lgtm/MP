/**
 * @file Firestore Security Rules for ParkSmart Reserve.
 *
 * @corePhilosophy
 * This ruleset enforces a user-ownership model for user profiles and a public-read,
 * owner-write model for parking slots, reservations, violations, and feedback.
 *
 * @dataStructure
 * - /users/{userId}: Stores individual user profiles, accessible only by the user.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data, publicly readable but writable only by an authorized entity.
 * - /reservations/{reservationId}: Stores reservation data, publicly readable but writable with ownership constraints.
 * - /violations/{violationId}: Stores violation data, publicly readable but writable with ownership constraints.
 * - /feedback/{feedbackId}: Stores user feedback data, publicly readable but writable by anyone.
 *
 * @keySecurityDecisions
 * - Users can only access their own profile data.
 * - Listing of users is disallowed.
 * - Public read access is granted for parking slots, reservations, violations, and feedback to facilitate discovery.
 * - Write access to reservations is restricted to the user who owns the reservation, but new reservations are open to all authenticated users.
 * - The `id` field is validated on `create` operations to ensure path consistency.
 *
 * @denormalizationForAuthorization
 * - Reservations include the `userId` field to enable ownership-based access control.
 *
 * @structuralSegregation
 * - There is no segregation of data; all collections are top-level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to user profile data only to the authenticated user.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if the user's UID matches the 'userId' path segment.
     * @deny (get, create, update, delete, list) if the user is not authenticated or the UID does not match.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data.id == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot data, but restricts writes.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Provides public information about parking slots while restricting modifications.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to reservation data and allows a user to create a reservation for themselves.
     * @path /reservations/{reservationId}
     * @allow (get, list) to anyone.
     * @allow (create) if the user is authenticated and the `userId` field matches the user's UID.
     * @allow (update, delete) if the user is the owner of the reservation.
     * @deny (create, update, delete) if the user is not authenticated or does not own the reservation.
     * @principle Allows users to manage their own reservations.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner() {
          return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      allow get, list: if true;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Allows public read access to violation data, but restricts writes.
     * @path /violations/{violationId}
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Provides public information about violations while restricting modifications.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to feedback data, but restricts writes.
     * @path /feedback/{feedbackId}
     * @allow (get, list) to anyone.
     * @allow (create) to anyone.
     * @deny (update, delete) to everyone.
     * @principle Provides public information about feedback and allows users to submit feedback.
     */
    match /feedback/{feedbackId} {
        allow get, list, create: if true;
        allow update: if false;
        allow delete: if false;
    }
  }
}