/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and open access to parking slot information.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores public information about parking slots.
 * - /reservations/{reservationId}: Stores reservation data, enforcing user-based access.
 * - /violations/{violationId}: Stores parking violation data.
 * - /feedback/{feedbackId}: Stores user feedback data, accessible to all.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing users is not allowed.
 * - Parking slot information is publicly readable.
 * - Reservation data is user-specific.
 * - Feedback data is publicly accessible.
 *
 * Denormalization for Authorization:
 * - The 'Reservation' entity includes a 'userId' field, which is used to enforce ownership. This avoids the need to query a separate user document for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @deny (list) - No one can list all users.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to parking slot information. Parking slot data is publicly readable.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user can read parking slot data.
     * @deny (create, update, delete) - No one can create, update, or delete parking slot data through the client.
     * @principle Allows public read access and restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to reservation data. Each user can only access their own reservations.
     * @path /reservations/{reservationId}
     * @allow (create) - User with UID 'user123' can create a reservation with userId: 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their reservation with userId: 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a reservation with userId: 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the reservation with userId: 'user123'.
     * @principle Enforces user-specific data access based on the 'userId' field.
     */
    match /reservations/{reservationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(request.auth.uid);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) && resource != null;
      allow delete: if isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to violation data. Write access is restricted.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user can read violation data.
     * @deny (create, update, delete) - No one can create, update, or delete violation data through the client.
     * @principle Restricts write access to violation data.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to feedback data. All users can submit feedback.
     * @path /feedback/{feedbackId}
     * @allow (get, list, create) - Any user can read feedback data and create new feedback entries.
     * @deny (update, delete) - No user can update or delete feedback.
     */
    match /feedback/{feedbackId} {
      allow get, list, create: if true;
      allow update, delete: if false;
    }
  }
}