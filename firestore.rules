/**
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to parking slot information. It also permits the creation
 * of violation records. All write operations must be authenticated.
 * @dataStructure
 * - /users/{userId}: User profile data, accessible only by the user themselves.
 * - /parkingSlots/{parkingSlotId}: Publicly readable parking slot data.
 * - /reservations/{reservationId}: Reservation data.
 * - /violations/{violationId}: Violation data.
 * - /feedback/{feedbackId}: Feedback data.
 * @keySecurityDecisions
 * - Users can only read and write their own user profiles.
 * - Listing of users is disallowed.
 * - Parking slot data is publicly readable.
 * - All write operations require authentication.
 * - No data validation is enforced beyond ownership on user documents.
 * @denormalizationForAuthorization
 *   No denormalization is used in this rule set.
 * @structuralSegregation
 *   No structural segregation is applied in this rule set.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is signed in and the requested userId matches the authenticated user's UID.
     * @deny (get, create, update, delete) if the user is not signed in or the requested userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot data. All users can see all parking slots.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) if true.
     * @deny (create, update, delete) always. Parking slots should only be modified by trusted back-end processes.
     * @principle Allows public read access to non-sensitive data.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows any signed-in user to create, read, update, or delete reservations.
     * @path /reservations/{reservationId}
     * @allow (get, list, create, update, delete) if the user is signed in.
     * @deny (get, list, create, update, delete) if the user is not signed in.
     */
    match /reservations/{reservationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows any signed-in user to create, read, update, or delete violations.
     * @path /violations/{violationId}
     * @allow (get, list, create, update, delete) if the user is signed in.
     * @deny (get, list, create, update, delete) if the user is not signed in.
     */
    match /violations/{violationId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
    /**
     * @description Allows any signed-in user to create, read, update, or delete feedback.
     * @path /feedback/{feedbackId}
     * @allow (get, list, create, update, delete) if the user is signed in.
     * @deny (get, list, create, update, delete) if the user is not signed in.
     */
    match /feedback/{feedbackId} {
          allow get: if isSignedIn();
          allow list: if isSignedIn();
          allow create: if isSignedIn();
          allow update: if isSignedIn();
          allow delete: if isSignedIn();
    }

  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the existing owner of the document.
  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}