rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces read/write access only to the authenticated user's own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching {userId}.
     * @deny (get, create, update, delete) if the request is made by a different user or an unauthenticated user.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Public read access for all users.
     * @deny (create, update, delete) Write operations are denied.
     * @principle Provides public read access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to reservation information.
     * @path /reservations/{reservationId}
     * @allow (get, list) Public read access for all users.
     * @deny (create, update, delete) Write operations are denied.
     * @principle Provides public read access.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to violation data.
     * @path /violations/{violationId}
     * @allow (get, list) Public read access for all users.
     * @deny (create, update, delete) Write operations are denied.
     * @principle Provides public read access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to user feedback.
     * @path /feedback/{feedbackId}
     * @allow (get, list) Public read access for all users.
     * @deny (create, update, delete) Write operations are denied.
     * @principle Provides public read access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}