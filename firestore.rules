/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User profiles are strictly owned and controlled by each authenticated user.
 * Reservations are also associated with a user ID and are accessible only to that user.
 * Parking slots, violations, and feedback are publicly readable but not writable directly by clients.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, where {userId} is the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Parking slot information.
 * - /reservations/{reservationId}: Reservation data, each linked to a specific {userId}.
 * - /violations/{violationId}: Parking violation data.
 * - /feedback/{feedbackId}: User feedback.
 *
 * Key Security Decisions:
 * - Users can only read/write their own profile data under /users/{userId}.
 * - Reservations are accessible only to the user who created them.
 * - Listing reservations is only allowed for the user that owns them.
 * - Parking slots, violations, and feedback are publicly readable but only writable via backend services (not implemented in these rules).
 *
 * Denormalization for Authorization:
 * - Reservations include a `userId` field, allowing rules to enforce ownership without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces strict user-ownership for profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile.
     * @allow (get, update, delete) User with UID 'user123' can read/write their own profile.
     * @deny (create, get, update, delete) User with UID 'otherUser' cannot access 'user123' profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Disable listing of all user profiles.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot data.
     * @deny (create, update, delete) No direct client-side writes allowed.
     * @principle Allows public reads while restricting write access to prevent unauthorized modifications.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes only allowed via backend.
    }

    /**
     * @description Enforces user-ownership for reservations.
     * @path /reservations/{reservationId}
     * @allow (create) User with UID 'user123' can create a reservation with userId: 'user123'.
     * @allow (get, update, delete) User with UID 'user123' can read/write their own reservation.
     * @deny (create, get, update, delete) User with UID 'otherUser' cannot access 'user123' reservation.
     * @principle Enforces document ownership for writes and restricts access to a user's own reservations.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    /**
     * @description Allows public read access to violation data.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation data.
     * @deny (create, update, delete) No direct client-side writes allowed.
     * @principle Allows public reads while restricting write access to prevent unauthorized modifications.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes only allowed via backend.
    }

    /**
     * @description Allows public read access to user feedback.
     * @path /feedback/{feedbackId}
     * @allow (get, list) Any user can read user feedback.
     * @deny (create, update, delete) No direct client-side writes allowed.
     * @principle Allows public reads while restricting write access to prevent unauthorized modifications.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Writes only allowed via backend.
    }
  }
}