/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data ownership and restricts unauthorized access to sensitive information.
 *
 * Data Structure:
 * - Users: Stored under `/users/{userId}`, where `{userId}` matches the Firebase Auth UID.
 * - Parking Slots: Stored under `/parkingSlots/{parkingSlotId}`.
 * - Reservations: Stored under `/reservations/{reservationId}`.
 * - Violations: Stored under `/violations/{violationId}`.
 * - Feedback: Stored under `/feedback/{feedbackId}`.
 *
 * Key Security Decisions:
 * - User data is strictly controlled: only the authenticated user can read/write their own profile.
 * - Reservations can only be deleted by owner.
 * - No listing of users is allowed for privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if request.auth.uid == userId
     * @allow (create) if request.auth.uid == request.resource.data.id
     * @deny (get) if request.auth == null
     * @deny (list) Always deny listing all users.
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures parking slot data. Read-only access for all, no writes permitted.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes to parking slots.
     * @principle Public read, no write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secures reservation data. Reservations can only be deleted by owner.
     * @path /reservations/{reservationId}
     * @allow (get, list) if true
     * @allow create: if request.auth.uid == request.resource.data.userId;
     * @deny update: if true;
     * @allow delete: if resource.data.userId == request.auth.uid;
     * @principle Enforces user ownership for writes.
     */
    match /reservations/{reservationId} {
       function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if false;
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Secures violation data. Read-only access for all, no writes permitted.
     * @path /violations/{violationId}
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny writes to violations.
     * @principle Public read, no write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read and write access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow get, list, create: if true;
     * @deny update, delete: if true;
     * @principle Public read and write access for feedback submission.
     */
    match /feedback/{feedbackId} {
      allow get, list, create: if true;
      allow update, delete: if false;
    }
  }
}