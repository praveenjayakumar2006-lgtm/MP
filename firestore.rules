/**
 * @file Firestore Security Rules for ParkSmart Reserve.
 *
 * @core_philosophy This ruleset prioritizes user data protection and prevents unauthorized access.
 *  It implements a combination of ownership-based and public-read/owner-write access control patterns.
 *  Schema validation is relaxed to facilitate rapid prototyping.
 *
 * @data_structure
 *  - /users/{userId}: Stores user profiles; 'userId' matches the Firebase Auth UID.
 *  - /parkingSlots/{parkingSlotId}: Stores parking slot data.
 *  - /reservations/{reservationId}: Stores reservation data.
 *  - /violations/{violationId}: Stores parking violation data.
 *  - /feedback/{feedbackId}: Stores user feedback.
 *
 * @key_security_decisions
 *  - Users can only read and write their own profile data under /users/{userId}.
 *  - Listing of users is explicitly denied to prevent enumeration.
 *  - Reservations are publicly readable but only the creating user can modify.
 *  - Parking slots are publicly readable. Writes are disallowed.
 *  - Violations are publicly readable. Writes are disallowed.
 *  - Feedback is publicly readable. Writes are disallowed.
 *
 * @denormalization_for_authorization
 *  - Reservations include the userId field to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID to compare against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }


    /**
     * @description Defines access rules for user profile data.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get) Signed-in user reads their own profile.
     * @allow (update) Signed-in user updates their own profile.
     * @allow (delete) Signed-in user deletes their own profile.
     * @deny (create) Signed-in user tries to create another user's profile.
     * @deny (get) Signed-in user tries to read another user's profile.
     * @deny (update) Signed-in user tries to update another user's profile.
     * @deny (delete) Signed-in user tries to delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Defines access rules for parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get) Any user can read parking slot data.
     * @deny (create) No user can create parking slot data through the client.
     * @deny (update) No user can update parking slot data through the client.
     * @deny (delete) No user can delete parking slot data through the client.
     * @principle Allows public read access to parking slot information.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines access rules for reservation data.
     * @path /reservations/{reservationId}
     * @allow (get) Any user can read reservation data.
     * @allow (list) Any user can list reservation data.
     * @allow (create) A signed-in user can create a reservation.
     * @deny (update) Only the owner can update a reservation they own.
     * @deny (delete) Only the owner can delete a reservation they own.
     * @principle Allows public read access to reservation information but restricts write access to the owner.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Defines access rules for violation data.
     * @path /violations/{violationId}
     * @allow (get) Any user can read violation data.
     * @deny (create) No user can create violation data through the client.
     * @deny (update) No user can update violation data through the client.
     * @deny (delete) No user can delete violation data through the client.
     * @principle Allows public read access to violation information.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Defines access rules for feedback data.
     * @path /feedback/{feedbackId}
     * @allow (get) Any user can read feedback data.
     * @allow (list) Any user can list feedback data.
     * @allow (create) A signed-in user can submit feedback.
     * @deny (update) No user can update feedback through the client.
     * @deny (delete) No user can delete feedback through the client.
     * @principle Allows public read access to feedback information.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}