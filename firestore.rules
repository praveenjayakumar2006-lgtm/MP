/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles.
 * Reservations can be created by authenticated users and are associated with a specific user.
 * Parking slots, violations, and feedback are publicly readable but writable by nobody.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, secured by owner-only access.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data, publicly readable.
 * - /reservations/{reservationId}: Stores reservation data. Only signed-in users can create reservations.
 * - /violations/{violationId}: Stores violation data, publicly readable.
 * - /feedback/{feedbackId}: Stores user feedback, publicly readable, writeable by nobody.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Ambiguous relationships default to strict owner-only access.
 * - The rules explicitly deny all write access to the parkingSlots, violations, and feedback collections.
 *
 * Denormalization for Authorization:
 * - Reservations store the userId of the user making the reservation to simplify authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User 'user_abc' can access /users/user_abc.
     * @deny (get, create, update, delete) User 'user_abc' cannot access /users/user_xyz.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure parking slot information. Parking slots are publicly readable, but not writable.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Anyone can read parking slot information.
     * @deny (create, update, delete) No one can create, update, or delete parking slots.
     * @principle Public read access with no write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure reservation data. Only authenticated users can create reservations.
     * @path /reservations/{reservationId}
     * @allow (create) Authenticated user can create a reservation with their userId.
     * @deny (create) Unauthenticated user cannot create a reservation.
     * @principle Authenticated users can create reservations.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if false;

      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Secure parking violation data. Parking violations are publicly readable, but not writable.
     * @path /violations/{violationId}
     * @allow (get, list) Anyone can read parking violation information.
     * @deny (create, update, delete) No one can create, update, or delete parking violations.
     * @principle Public read access with no write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure user feedback data. Feedback is publicly readable, but not writable.
     * @path /feedback/{feedbackId}
     * @allow (get, list) Anyone can read user feedback.
     * @deny (create, update, delete) No one can create, update, or delete user feedback.
     * @principle Public read access with no write access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}