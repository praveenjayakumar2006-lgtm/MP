/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles,
 * allows public read access to parking slots, and requires authentication for
 * creating reservations and submitting feedback.
 *
 * @dataStructure
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching
 *   the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot details. Publicly readable.
 * - /reservations/{reservationId}: Stores parking reservations.
 * - /violations/{violationId}: Stores parking violation records.
 * - /feedback/{feedbackId}: Stores user feedback submissions.
 *
 * @keySecurityDecisions
 * - Users can only read/write their own profile data.
 * - Listing users is disallowed.
 * - Parking slot data is publicly readable but not writable by clients.
 * - Reservations can be created by authenticated users.
 * - Feedback can be created by authenticated users.
 * - The rules do NOT enforce the specific data types or the presence of optional fields
 *   in the documents, allowing for rapid prototyping. Data validation should be
 *   handled at the application level.
 *
 * @denormalizationForAuthorization
 * - To avoid costly `get()` calls, the `Reservation` entity requires the `userId`
 *   field to match the authenticated user's UID. This is enforced on creation.
 *
 * @structuralSegregation
 * - There is no distinction between public and private data within a single collection.
 *   All collections are treated as either entirely public or entirely private.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile data.
     * @path /users/{userId}
     * @allow (get, update, delete) User with UID 'user123' can read/write /users/user123
     * @deny (get, update, delete) User with UID 'user456' cannot read/write /users/user123
     * @allow (create) User with UID 'user123' can create document /users/user123
     * @deny (create) User with UID 'user123' cannot create document /users/user456
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot data.
     * @deny (create, update, delete) No user can create, update, or delete parking slot data.
     * @principle Allows public read access, restricts all write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows authenticated users to create, read, update, and delete their own reservations.
     * @path /reservations/{reservationId}
     * @allow (create) Authenticated user can create a reservation with matching userId.
     * @allow (get, update, delete) Authenticated user can read/write reservation if userId matches.
     * @deny (create) Unauthenticated user cannot create reservations.
     * @deny (create) Authenticated user cannot create a reservation with a mismatched userId.
     * @principle Enforces user-based authorization for reservations.
     */
    match /reservations/{reservationId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(userId) {
            return isSignedIn() && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow list: if false;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if isExistingOwner(resource.data.userId);
        allow delete: if isExistingOwner(resource.data.userId);
    }

      /**
       * @description Allows authenticated users to create violation records.
       * @path /violations/{violationId}
       * @allow (create) Authenticated user can create a violation record.
       * @deny (create) Unauthenticated user cannot create violation records.
       */
      match /violations/{violationId} {
        function isSignedIn() {
          return request.auth != null;
        }
      allow get, list: if false;
       allow create: if isSignedIn();
       allow update: if false;
       allow delete: if false;
     }

    /**
     * @description Allows authenticated users to create feedback.
     * @path /feedback/{feedbackId}
     * @allow (create) Authenticated user can create feedback.
     * @deny (create) Unauthenticated user cannot create feedback.
     */
    match /feedback/{feedbackId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}