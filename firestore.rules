/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a combination of user-based access control and public read access where appropriate.
 * User data is secured behind authentication, while some collections (like feedback) allow public read access.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the authenticated user.
 * - /parkingSlots/{parkingSlotId}: Parking slot information.
 * - /reservations/{reservationId}: Parking reservations.
 * - /violations/{violationId}: Parking violation records.
 * - /feedback/{feedbackId}: User feedback submissions.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data under /users/{userId}.
 * - Feedback is publicly readable but allows anyone to submit.
 *
 *  Data Denormalization:
 * No data denormalization is needed in this configuration.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user data.
     * @path /users/{userId}
     * @allow (get, list) User with matching UID can read their own data.
     * @allow (create) User can create their own profile if the UID matches.
     * @allow (update, delete) User with matching UID can update or delete their own data.
     * @deny (get, list) User cannot read other user's data.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (update, delete) User cannot update or delete another user's data.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot information.
     * @deny (create, update, delete) No user can create, update, or delete parking slots.
     * @principle Public read access with no write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to read parking violation information.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation information.
     * @deny (create, update, delete) No user can create, update, or delete violation information.
     * @principle Public read access with no write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to submit feedback.
     * @path /feedback/{feedbackId}
     * @allow (create) Any user can create feedback.
     * @allow (get, list) Any user can read feedback.
     * @deny (update, delete) No user can update or delete feedback.
     * @principle Allows public submission of feedback with read access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if true;
      allow update, delete: if false;
    }

   /**
     * @description Allows users to read, create, update, and delete their own reservation data.
     * @path /reservations/{reservationId}
     * @allow (get, list) User with matching UID can read their own reservation data.
     * @allow (create) User can create their own reservation data if the UID matches.
     * @allow (update, delete) User with matching UID can update or delete their own reservation data.
     * @deny (get, list) User cannot read other user's reservation data.
     * @deny (create) User cannot create reservation data with a mismatched UID.
     * @deny (update, delete) User cannot update or delete another user's reservation data.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }
      
      allow get, list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }
}