/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a hybrid security model, combining user-owned data with publicly accessible data, with restrictions on modification.
 *
 * Data Structure:
 * - Users: User profiles are stored under `/users/{userId}` and are strictly owned by the authenticated user.
 * - Parking Slots: Parking slot information is stored under `/parkingSlots/{parkingSlotId}` and is publicly readable.  Writes are not permitted by the provided rules.
 * - Reservations: Reservation data is stored under `/reservations/{reservationId}` and is publicly readable.  Writes are not permitted by the provided rules.
 * - Violations: Violation data is stored under `/violations/{violationId}` and is publicly readable. Writes are not permitted by the provided rules.
 * - Feedback: Feedback data is stored under `/feedback/{feedbackId}` and is publicly readable.  Writes are not permitted by the provided rules.
 *
 * Key Security Decisions:
 * - User data is private and only accessible to the owning user.
 * - Listing of users is disallowed for privacy.
 * - Parking slots, reservations, violations, and feedback are publicly readable but writes are not allowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their profile at /users/user123 if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information. Writes are not permitted.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user, authenticated or not, can read parking slot data.
     * @deny (create, update, delete) - No one can create, update, or delete parking slot data.
     * @principle Grants public read access with no write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to reservation data. Writes are not permitted.
     * @path /reservations/{reservationId}
     * @allow (get, list) - Any user, authenticated or not, can read reservation data.
     * @deny (create, update, delete) - No one can create, update, or delete reservation data.
     * @principle Grants public read access with no write access.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to violation data. Writes are not permitted.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user, authenticated or not, can read violation data.
     * @deny (create, update, delete) - No one can create, update, or delete violation data.
     * @principle Grants public read access with no write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to feedback data. Writes are not permitted.
     * @path /feedback/{feedbackId}
     * @allow (get, list) - Any user, authenticated or not, can read feedback data.
     * @deny (create, update, delete) - No one can create, update, or delete feedback data.
     * @principle Grants public read access with no write access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}