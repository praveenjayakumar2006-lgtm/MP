/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and reservations.
 * Parking slot and violation data are publicly readable but only writable by backend services.
 * Feedback is publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores individual user profiles, with 'userId' matching the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information.
 * - /reservations/{reservationId}: Stores reservation data, with a 'userId' field linking to the user.
 * - /violations/{violationId}: Stores parking violation data.
 * - /feedback/{feedbackId}: Stores user feedback.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Reservations are owned by the user who created them and can only be managed by that user.
 * - Listing of users is disallowed.
 * - Parking slots and violations are readable by all but only writable by backend services.
 * - Feedback is publicly accessible.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' creates their profile with matching ID.
     *   `request.auth.uid == 'user123' && request.resource.data.id == 'user123'`
     * @allow (get, update, delete) - User with UID 'user123' reads/updates/deletes their profile.
     *   `request.auth.uid == 'user123'`
     * @deny (create) - User with UID 'user123' tries to create a profile for 'user456'.
     *   `request.auth.uid == 'user123' && request.resource.data.id == 'user456'`
     * @deny (get, update, delete) - User with UID 'user123' tries to read/update/delete profile 'user456'.
     *   `request.auth.uid == 'user123'`
     * @principle Enforces document ownership for user profiles, validating the user ID on create and update.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure parking slot data.  Readable by all, writable by backend.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) Any user can read parking slot data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Parking slot information is considered public and readable by all users.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure reservations. Users can only manage their own reservations.
     * @path /reservations/{reservationId}
     * @allow (create) - User with UID 'user123' creates a reservation with matching userId.
     *   `request.auth.uid == 'user123' && request.resource.data.userId == 'user123'`
     * @allow (get, update, delete) - User with UID 'user123' reads/updates/deletes their reservation.
     *   `request.auth.uid == 'user123' && resource.data.userId == 'user123'`
     * @deny (create) - User with UID 'user123' tries to create a reservation for 'user456'.
     *   `request.auth.uid == 'user123' && request.resource.data.userId == 'user456'`
     * @deny (get, update, delete) - User with UID 'user123' tries to read/update/delete reservation for 'user456'.
     *   `request.auth.uid == 'user123' && resource.data.userId == 'user456'`
     * @principle Enforces document ownership for reservations, validating the user ID on create and update/delete.
     */
    match /reservations/{reservationId} {
      allow get: if request.auth.uid == resource.data.userId;
      allow list: if false;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId;
      allow delete: if request.auth.uid == resource.data.userId;
    }

    /**
     * @description Secure violation data. Readable by all, writable by backend.
     * @path /violations/{violationId}
     * @allow (get, list) Any user can read violation data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Violation information is considered public and readable by all users.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allow public read and write access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow (get, list, create, update, delete) All operations are allowed for any user.
     * @principle Feedback data is publicly accessible.
     */
    match /feedback/{feedbackId} {
      allow get, list, create, update, delete: if true;
    }
  }
}