/**
 * @description This ruleset enforces a user-ownership model for user profiles and allows public read access to parking slots, reservations, violations, and feedback.
 * @dataStructure
 * - /users/{userId}: Stores individual user profiles, accessible only to the user themselves.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data, publicly readable.
 * - /reservations/{reservationId}: Stores reservation data, publicly readable.
 * - /violations/{violationId}: Stores violation data, publicly readable.
 * - /feedback/{feedbackId}: Stores user feedback, publicly readable.
 * @keySecurityDecisions
 * - Users can only read and write their own profile data.
 * - Listing of users is disallowed.
 * - Parking slots, reservations, violations, and feedback are publicly readable but writes are denied until further notice.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @allow (get) User with UID 'user123' can read their profile at /users/user123.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for writes. Restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id && resource != null;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot data.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get) Any user can read a parking slot.
     * @allow (list) Any user can list parking slots.
     * @deny (create) No user can create a parking slot without authorization.
     * @deny (update) No user can update a parking slot without authorization.
     * @deny (delete) No user can delete a parking slot without authorization.
     * @principle Allows public read access, restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

     /**
      * @description Allows public read access to reservations.
      * @path /reservations/{reservationId}
      * @allow (get) Any user can read reservation data.
      * @allow (list) Any user can list reservation data.
      * @deny (create) No user can create a reservation without authorization.
      * @deny (update) No user can update a reservation without authorization.
      * @deny (delete) No user can delete a reservation without authorization.
      * @principle Allows public read access, restricts write access.
      */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to violations.
     * @path /violations/{violationId}
     * @allow (get) Any user can read violation data.
     * @allow (list) Any user can list violation data.
     * @deny (create) No user can create a violation without authorization.
     * @deny (update) No user can update a violation without authorization.
     * @deny (delete) No user can delete a violation without authorization.
     * @principle Allows public read access, restricts write access.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to feedback.
     * @path /feedback/{feedbackId}
     * @allow (get) Any user can read feedback.
     * @allow (list) Any user can list feedback.
     * @deny (create) No user can create a feedback without authorization.
     * @deny (update) No user can update a feedback without authorization.
     * @deny (delete) No user can delete a feedback without authorization.
     * @principle Allows public read access, restricts write access.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}