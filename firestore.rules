/**
 * @description This ruleset implements a hybrid security model, balancing open access for public data with restricted access based on ownership and user roles.
 * @dataStructure
 *  - /users/{userId}: Stores individual user profiles, accessible only to the owning user.
 *  - /parkingSlots/{parkingSlotId}: Contains public parking slot information, readable by all.
 *  - /reservations/{reservationId}: Stores reservation data, readable and writable only by the owning user.
 *  - /violations/{violationId}: Stores violation data, writeable by the service account via `allow create: if false;` and only readable by authenticated users.
 *  - /feedback/{feedbackId}: Stores user feedback, writeable by authenticated users.
 * @keySecurityDecisions
 *  - Users can only access their own data under /users/{userId}.
 *  - Listing of users is forbidden.
 *  - Public read access is granted for /parkingSlots/{parkingSlotId}.
 *  - Write access to violations is denied to client app, allowing it only from backend.
 *  - Relational integrity is enforced on reservation creation by matching the userId to the authenticated user's UID.
 *  - All updates and deletes are checked for resource existence to prevent accidental operations on non-existent data.
 * @denormalizationForAuthorization N/A.  No denormalization of data is necessary for these rules.
 * @structuralSegregation N/A. No structural segregation of data is being used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - If the user's UID matches the userId.
     * @allow (get, list, update, delete) - If the user's UID matches the userId.
     * @deny (create) - If the user's UID does not match the userId.
     * @deny (get, list, update, delete) - If the user's UID does not match the userId.
     * @principle Enforces user-ownership for accessing user data.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Public read access.
     * @deny (create, update, delete) - No client-side writes allowed.
     * @principle Allows public access to parking slot information, but restricts modification.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to reservation data.
     * @path /reservations/{reservationId}
     * @allow (create) - If the user's UID matches the reservation's userId.
     * @allow (get, list, update, delete) - If the user's UID matches the reservation's userId.
     * @deny (create) - If the user's UID does not match the reservation's userId.
     * @deny (get, list, update, delete) - If the user's UID does not match the reservation's userId.
     * @principle Enforces user-ownership for accessing reservation data and validates relational integrity.
     */
    match /reservations/{reservationId} {
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.userId;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to violation data.
     * @path /violations/{violationId}
     * @allow (get, list) - Only authenticated users can read.
     * @deny (create, update, delete) - No client-side writes allowed (only backend).
     * @principle Restricts write access to violation data to the backend.
     */
    match /violations/{violationId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow (create) - Authenticated users only.
     * @deny (get, update, list, delete) - Not accessible by client.
     */
    match /feedback/{feedbackId} {
      allow create: if isSignedIn();
      allow get, update, list, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the resource.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    //Helper function to determine if the user is the owner of the resource and it exists.
  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}