/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model. User profiles are strictly controlled
 * by their respective owners. Reservations are publicly readable to allow for
 * application functionality without authentication, but restricted to authenticated users for creation. Other data like violations and feedback are open to the public.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, where {userId} is the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Parking slot information.
 * - /reservations/{reservationId}: Reservation data.
 * - /violations/{violationId}: Parking violation data.
 * - /feedback/{feedbackId}: User feedback.
 *
 * Key Security Decisions:
 * - Users can only manage their own profile data.
 * - Reservations are readable by all but can only be created by authenticated users.
 * - Listing users is disallowed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requested user ID matches the authenticated user's ID and the document exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Enforces document ownership for writes.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user123' creates a new profile document with ID 'user123'.
     * @deny (create) - Authenticated user with UID 'user456' tries to create a profile document with ID 'user123'.
     * @allow (update) - Authenticated user with UID 'user123' updates their profile document with ID 'user123'.
     * @deny (update) - Authenticated user with UID 'user456' tries to update the profile document with ID 'user123'.
     * @principle Enforces document ownership for writes
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get) - Any user can read a parking slot document.
     * @allow (list) - Any user can list parking slot documents.
     * @deny (create) - Any user tries to create a parking slot document.
     * @principle Public read access
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to reservation data, but only authenticated users can create reservations.
     * @path /reservations/{reservationId}
     * @allow (get) - Any user can read a reservation document.
     * @allow (list) - Any user can list reservation documents.
     * @allow (create) - Authenticated user can create a reservation document.
     * @deny (update) - Any user tries to update a reservation document.
     * @principle Public read, authenticated create.
     */
    match /reservations/{reservationId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to violation data.
     * @path /violations/{violationId}
     * @allow (get) - Any user can read a violation document.
     * @allow (list) - Any user can list violation documents.
     * @deny (create) - Any user tries to create a violation document.
     * @principle Public read access
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read and write access to feedback data.
     * @path /feedback/{feedbackId}
     * @allow (get) - Any user can read a feedback document.
     * @allow (list) - Any user can list feedback documents.
     * @allow (create) - Any user can create a feedback document.
     * @deny (update) - Any user tries to update a feedback document.
     * @principle Public read/write access for feedback
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}