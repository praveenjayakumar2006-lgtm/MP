/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows open reads for parking slots.
 * Violations, feedback, and reservations are open read, but only authorized for create, update, and delete.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, with 'userId' matching the Firebase Authentication UID.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot information.
 * - /reservations/{reservationId}: Stores reservation data.
 * - /violations/{violationId}: Stores parking violation data.
 * - /feedback/{feedbackId}: Stores user feedback.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Parking slots are publicly readable.
 * - All write operations must be authenticated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their profile with matching UID.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create, update, delete) - Any other user attempts to access another user's profile.
     * @deny (list) - Listing all users is prohibited.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information. Only authenticated users can create, update, or delete slots.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user can read parking slot information.
     * @allow (create) - Only authenticated users can create parking slots.
     * @allow (update, delete) - Only authenticated users can update/delete parking slots.
     * @deny (create, update, delete) - Unauthenticated users cannot modify parking slots.
     * @principle Allows public read access with authentication required for writes.
     */
    match /parkingSlots/{parkingSlotId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows open read and authenticated create, update and delete access to reservations.
     * @path /reservations/{reservationId}
     * @allow (get, list) - Any user can read reservation information.
     * @allow (create) - Only authenticated users can create reservations.
     * @allow (update, delete) - Only authenticated users can update/delete reservations.
     * @deny (create, update, delete) - Unauthenticated users cannot modify reservations.
     */
    match /reservations/{reservationId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows open read and authenticated create, update and delete access to violations.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user can read violation information.
     * @allow (create) - Only authenticated users can create violations.
     * @allow (update, delete) - Only authenticated users can update/delete violations.
     * @deny (create, update, delete) - Unauthenticated users cannot modify violations.
     */
    match /violations/{violationId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows open read and authenticated create, update and delete access to feedback.
     * @path /feedback/{feedbackId}
     * @allow (get, list) - Any user can read feedback information.
     * @allow (create) - Only authenticated users can create feedback.
     * @allow (update, delete) - Only authenticated users can update/delete feedback.
     * @deny (create, update, delete) - Unauthenticated users cannot modify feedback.
     */
    match /feedback/{feedbackId} {
        function isSignedIn() {
            return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }
  }
}