/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open access for some data with strict ownership or administrative control for others.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, secured with owner-only access.
 * - /parkingSlots/{parkingSlotId}: Parking slot information, intended for public read access but write-protected.
 * - /reservations/{reservationId}: Reservation data, secured with owner-only access (userId).
 * - /violations/{violationId}: Parking violation data, write-protected.
 * - /feedback/{feedbackId}: User feedback data, write-protected.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data under /users/{userId}.
 * - Listing of users is disallowed.
 * - Parking slot data (/parkingSlots/{parkingSlotId}) is publicly readable but not writable by clients.
 * - Reservations are secured to the owning user (userId in the document must match the authenticated user's UID).
 * - Feedback submissions are allowed but are otherwise write-protected.
 *
 * Denormalization for Authorization:
 * - Reservations include the userId to enable direct ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document at /users/user123.
     * @allow (get) User with UID 'user123' can read their own profile document at /users/user123.
     * @allow (update) User with UID 'user123' can update their own profile document at /users/user123.
     * @allow (delete) User with UID 'user123' can delete their own profile document at /users/user123.
     * @deny (create) User with UID 'user123' cannot create a profile document at /users/user456.
     * @deny (get) User with UID 'user123' cannot read the profile document of user 'user456' at /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Control access to parking slot data. Public read, no client writes.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get) Any user can read a parking slot document.
     * @allow (list) Any user can list parking slot documents.
     * @deny (create) No user can create parking slot documents.
     * @deny (update) No user can update parking slot documents.
     * @deny (delete) No user can delete parking slot documents.
     * @principle Allows public read access but restricts write access.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secure reservations. Only the user who created the reservation can manage it.
     * @path /reservations/{reservationId}
     * @allow (create) User with UID 'user123' can create a reservation document where reservation.userId == 'user123'.
     * @allow (get) User with UID 'user123' can read a reservation document where reservation.userId == 'user123'.
     * @allow (update) User with UID 'user123' can update a reservation document where reservation.userId == 'user123'.
     * @allow (delete) User with UID 'user123' can delete a reservation document where reservation.userId == 'user123'.
     * @deny (create) User with UID 'user123' cannot create a reservation document where reservation.userId == 'user456'.
     * @deny (get) User with UID 'user123' cannot read the reservation document of user 'user456'.
     * @principle Enforces document ownership based on the userId field.
     */
    match /reservations/{reservationId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isExistingOwner(resource.data.userId);
      allow list: if request.auth.uid == request.auth.uid;
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Restrict access to violation data. No client writes allowed.
     * @path /violations/{violationId}
     * @allow (get) Any user can read a violation document.
     * @allow (list) Any user can list violation documents.
     * @deny (create) No user can create violation documents.
     * @deny (update) No user can update violation documents.
     * @deny (delete) No user can delete violation documents.
     * @principle Read access is public, write access is denied.
     */
    match /violations/{violationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allow feedback submissions but prevent modifications or deletion.
     * @path /feedback/{feedbackId}
     * @allow (create) Any user can create a feedback document.
     * @deny (get) No user can get a feedback document.
     * @deny (list) No user can list feedback documents.
     * @deny (update) No user can update feedback documents.
     * @deny (delete) No user can delete feedback documents.
     * @principle Allows creation of feedback but prevents further access.
     */
    match /feedback/{feedbackId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}