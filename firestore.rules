rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles under their respective user ID.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, list, update, delete) - Authenticated user with matching UID can read and modify their profile.
     * @deny (create) - Authenticated user tries to create a profile for another user.
     * @deny (update, delete) - Authenticated user tries to modify another user's profile.
     * @principle Enforces strict user-ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Restrict access to parking slot information. Public read, no client-side write.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user can read parking slot data.
     * @deny (create, update, delete) - No user can create, update, or delete parking slots through client-side rules.
     * @principle Enforces read-only access to parking slot data from the client.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows users to create reservations. Reservations can only be read, updated, or deleted by their owner.
     * @path /reservations/{reservationId}
     * @allow (create) - Any signed-in user can create a reservation.
     * @allow (get, list, update, delete) - The owner of the reservation can read, update, and delete it.
     * @deny (update, delete) - A user attempts to modify a reservation they don't own.
     * @principle Enforces ownership-based access for reservations.
     */
    match /reservations/{reservationId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }
      function isExistingOwner() {
        return isOwner() && exists(resource);
      }

      allow get: if isSignedIn() && isOwner();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Restricts access to parking violation data. Public read, no client-side write.
     * @path /violations/{violationId}
     * @allow (get, list) - Any user can read violation data.
     * @deny (create, update, delete) - No user can create, update, or delete violations through client-side rules.
     * @principle Enforces read-only access to violation data from the client.
     */
    match /violations/{violationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows anyone to submit feedback.
     * @path /feedback/{feedbackId}
     * @allow (get, list, create) - Any user, signed in or not, can read feedback and submit new feedback.
     * @deny (update, delete) - Feedback cannot be updated or deleted by users.
     * @principle Allows public submission of feedback.
     */
    match /feedback/{feedbackId} {
      allow get, list, create: if true;
      allow update, delete: if false;
    }
  }
}