/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a combination of user-ownership and public-read with owner-write access control patterns.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, accessible only to the user themselves.
 * - /parkingSlots/{parkingSlotId}: Parking slot information, publicly readable but writable by nobody.
 * - /reservations/{reservationId}: Reservation data, publicly readable but writable by nobody.
 * - /violations/{violationId}: Violation data, publicly readable but writable by nobody.
 * - /feedback/{feedbackId}: Feedback data, publicly readable but writable by nobody.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user documents.
 * - Listing of reservations, parking slots, violations, and feedback is disallowed to prevent unauthorized data access.
 * - Other collections are publicly readable but not writable.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can read and write their own user document.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the request is made by the user with matching userId.
     * @deny (get, create, update, delete) if the request is made by a different user or without authentication.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Verify identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Verify user owns the data
      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      // Check if the document exists and the user owns it
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information, but disallows any writes.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) if true (public read).
     * @deny (create, update, delete) always (no writes allowed).
     * @principle Public read, no writes.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get: if true;
      allow list: if false; // Listing parkingSlots is not permitted.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to reservation data, but disallows any writes.
     * @path /reservations/{reservationId}
     * @allow (get, list) if true (public read).
     * @deny (create, update, delete) always (no writes allowed).
     * @principle Public read, no writes.
     */
    match /reservations/{reservationId} {
      allow get: if true;
      allow list: if false; // Listing reservations is not permitted due to the error reported.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to violation data, but disallows any writes.
     * @path /violations/{violationId}
     * @allow (get, list) if true (public read).
     * @deny (create, update, delete) always (no writes allowed).
     * @principle Public read, no writes.
     */
    match /violations/{violationId} {
      allow get: if true;
      allow list: if false; // Listing violations is not permitted.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to feedback data, but disallows any writes.
     * @path /feedback/{feedbackId}
     * @allow (get, list) if true (public read).
     * @deny (create, update, delete) always (no writes allowed).
     * @principle Public read, no writes.
     */
    match /feedback/{feedbackId} {
      allow get: if true;
      allow list: if false; // Listing feedback is not permitted.
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}