/**
 * @fileoverview Firestore Security Rules for ParkSmart Reserve.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection and enforces a strict ownership model
 * for user-related data (profiles and reservations). Other data, such as parking slots
 * and feedback, are open for reading but restricted on writes.  Violations are write-protected.
 *
 * Data Structure:
 * - /users/{userId}: User profile data, where {userId} is the Firebase Auth UID.
 * - /parkingSlots/{parkingSlotId}: Parking slot information.
 * - /reservations/{reservationId}: Reservation data.
 * - /violations/{violationId}: Parking violation data.
 * - /feedback/{feedbackId}: User feedback data.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted for parking slots and feedback.
 * - Strict owner-only access is enforced for user profiles and reservations.
 * - Violations are write-protected for security.
 *
 * Denormalization for Authorization:
 * The `reservations` collection requires the `userId` field to match the authenticated user's UID.
 * This avoids needing to query the `users` collection to validate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) - User with UID 'user123' cannot create a profile at /users/user456.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read, update, or delete the profile at /users/user456.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Validate that the path variable {userId} matches the authenticated user's UID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of users.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) - Any user, authenticated or not, can read parking slot data.
     * @deny (create, update, delete) - No user can create, update, or delete parking slot data.
     * @principle Allows public reads, restricts writes.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Enforces access control for reservations.
     * @path /reservations/{reservationId}
     * @allow (create) - User with UID 'user123' can create a reservation with userId: 'user123'.
     * @deny (create) - User with UID 'user123' cannot create a reservation with userId: 'user456'.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, update, and delete their reservations.
     * @deny (get, list, update, delete) - User with UID 'user123' cannot read, update, or delete reservations of other users.
     * @principle Enforces document ownership for all operations.
     */
    match /reservations/{reservationId} {

      function isSignedIn() {
          return request.auth != null;
      }

      allow get: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Restricts access to parking violation data.
     * @path /violations/{violationId}
     * @deny (get, list, create, update, delete) - No user can access violation data.
     * @principle Protects violation data from unauthorized access.
     */
    match /violations/{violationId} {
      allow get, list, create, update, delete: if false;
    }

    /**
     * @description Allows public read access to user feedback.
     * @path /feedback/{feedbackId}
     * @allow (get, list) - Any user, authenticated or not, can read feedback data.
     * @deny (create, update, delete) - No user can create, update, or delete feedback data.
     * @principle Allows public reads, restricts writes.
     */
    match /feedback/{feedbackId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}