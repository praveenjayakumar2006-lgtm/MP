/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles and allows public read access to parking slots and violations. Reservations are protected with user-based ownership, and feedback submissions are unrestricted.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data; access is restricted to the user.
 * - /parkingSlots/{parkingSlotId}: Stores parking slot data; read access is public, write access is restricted.
 * - /reservations/{reservationId}: Stores reservation data; access is restricted to the user who made the reservation.
 * - /violations/{violationId}: Stores parking violation data; read access is public, write access is restricted.
 * - /feedback/{feedbackId}: Stores user feedback; write access is public, read access is restricted.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Parking slots and violations are publicly readable but writes are not allowed (likely managed by a backend process).
 * - Feedback collection does not allow listing to prevent data leaks.
 *
 * Authorization Denormalization:
 * - Reservation documents use a "userId" field to link to the user making the reservation. This simplifies ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to parking slot information, but restricts all write access.
     * @path /parkingSlots/{parkingSlotId}
     * @allow (get, list) if true
     * @deny (create, update, delete) always
     * @principle Allows public read access with restricted writes.
     */
    match /parkingSlots/{parkingSlotId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for reservations. Only the user who created the reservation can read and write it.
     * @path /reservations/{reservationId}
     * @allow (get, create, update, delete) if request.auth.uid == resource.data.userId
     * @deny (get, create, update, delete) if request.auth.uid != resource.data.userId
     * @principle Enforces document ownership for writes.
     */
    match /reservations/{reservationId} {
        allow get: if request.auth.uid == resource.data.userId;
        allow list: if false; //CRITICAL: No access by default
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if request.auth.uid == resource.data.userId;
        allow delete: if request.auth.uid == resource.data.userId;
    }

     /**
      * @description Allows public read access to parking violation information, but restricts all write access.
      * @path /violations/{violationId}
      * @allow (get, list) if true
      * @deny (create, update, delete) always
      * @principle Allows public read access with restricted writes.
      */
    match /violations/{violationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to submit feedback, but restricts read access.
     * @path /feedback/{feedbackId}
     * @allow create if true
     * @deny (get, list, update, delete) always
     */
    match /feedback/{feedbackId} {
      allow get: if false;
      allow list: if false;
      allow create: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}